TARGET_NAME = "kill"
PATTERN = "basic"
FUNCTORS = {
	setup = {"igi_target_basic.setup_squad"},
	create = {"igi_target_basic.create_squad", script_name()..".setup_rewards"},
	status = {script_name()..".status"},
	cleanup = {},
}

local TASK_STATUSES = igi_subtask.TASK_STATUSES
local WorldState = igi_world_state.WorldState
local trace_assert = igi_helper.trace_assert

function is_completed(obj_data)
	local se_obj = WorldState.objects[obj_data.id]
	if not se_obj then return true end
	if se_obj:section_name() ~= obj_data.section_name then return true end
end

function status(entity)
	if is_completed(entity) then return TASK_STATUSES.COMPLETED end
	return TASK_STATUSES.RUNNING
end

function setup_rewards(entity)
	entity._complexity = calculate_complexity(entity)
end

local function get_monster_value(se_npc)
	local npc_section = se_npc:section_name()
	local factor = 1
	for k, new_factor in pairs(igi_db.SectionView('tiers.ltx', 'monster_tier_factor'):as_table()) do
		if string.find(npc_section, k) then
			factor = new_factor
			break
		end
	end

	local value = 100
	for k, new_value in pairs(igi_db.SectionView('misc.ltx', 'money_reward_mutants'):as_table()) do
		if string.find(npc_section, k) then
			value = new_value
			break
		end
	end
	return value*factor
end

local function get_npc_value(se_npc)
	local value = 1000
	local tier = string.match(se_npc:section_name(), "%d") or ""
	igi_helper.trace_dbg(se_npc:section_name(), tier)
	local factors = igi_db.SectionView('tiers.ltx', 'npc_tier_factor')

	return value*(factors[tier] or 1)
end

function calculate_complexity(entity)
	local reward = 0
	local se_squad = WorldState.objects[entity.id]
	local faction = se_squad:get_squad_community()

	if string.find(faction, "monster") then
		for se_npc in se_squad:squad_members() do
			se_npc = WorldState.objects[se_npc.id]
			reward = reward + get_monster_value(se_npc)
		end
	else
		for se_npc in se_squad:squad_members() do
			se_npc = WorldState.objects[se_npc.id]
			reward = reward + get_npc_value(se_npc)
		end
	end

	return reward
end

function get_complexity(entity)
	if entity._complexity then return entity._complexity end
	return 1000, 5000
end

function test(entity)
	local assert_test = igi_tests.assert_test
	entity._test_stage = (entity._test_stage or 0) + 1

	if entity._test_stage == 1 then
		local se_obj = igi_entities.get_binded_object(entity)
		assert_test(se_obj, "Kill entity does not exist")
		assert_test(se_obj:squad_members(), "Kill entity is not a squad")
		igi_tests.travel_to_se_obj(se_obj)

	elseif entity._test_stage == 2 then
		local se_obj = igi_entities.get_binded_object(entity)
		for se_npc in se_obj:squad_members() do
			local npc = igi_helper.level_object(se_npc.id)
			npc:kill(db.actor)
		end

	elseif entity._test_stage == 3 then
		assert_test(entity.status == "COMPLETED", "Quest did not complete after killing")
		return true
	end
end
igi_tests.register_subtask_test("test_target_kill", {
	entities = {
		{
			entity_type = "squad",
			section_name = "army_sim_squad_novice",
			to_create = true,
			where = "[smart.id]",
			target = "kill"
		},

		{
			entity_type = "location",
			search_for = "smart",
			where = "0,0",
			link_id = "smart",
		}
	}
})
