local trace_assert = igi_helper.trace_assert
local TASK_STATUSES = igi_subtask.TASK_STATUSES

Kill = {}
function Kill.on_init(entity)
	trace_assert(type(entity.id) == "number", "Kill: entity.id is not a number", entity)
	trace_assert(alife_object(entity.id), "Kill: no server object for this id", entity)
	trace_assert(alife_object(entity.id):commander_id(), "Kill: entity.id is not a squad", entity)

	entity._complexity = calculate_complexity(entity)
end

function Kill.status(entity)
	if not alife_object(entity.id) then return TASK_STATUSES.COMPLETED end
	return TASK_STATUSES.RUNNING
end

function Kill.quest_target(entity)
	return entity.id
end

local function get_monster_value(se_npc)
	local npc_section = se_npc:section_name()
	local factor = 1
	for k, new_factor in pairs(igi_helper.db_ini:collect_section('monster_tier_factor')) do
		if string.find(npc_section, k) then
			factor = assert(tonumber(new_factor))
			break
		end
	end

	local value = 100
	for k, new_value in pairs(igi_helper.db_ini:collect_section('money_reward_mutants')) do
		if string.find(npc_section, k) then
			value = assert(tonumber(new_value))
			break
		end
	end
	return value*factor
end

local function get_npc_value(se_npc)
	local value = 1000
	local tier = string.match(se_npc:section_name(), "%d") or ""
	igi_helper.trace_dbg(se_npc:section_name(), tier)
	local factor = igi_helper.db_ini:r_value('npc_tier_factor', tier, 2)

	return value*(factor or 1)
end

function calculate_complexity(entity)
	local reward = 0
	local se_squad = assert(alife_object(entity.id))
	local faction = se_squad:get_squad_community()

	if string.find(faction, "monster") then
		for se_npc in se_squad:squad_members() do
			se_npc = alife_object(se_npc.id)
			reward = reward + get_monster_value(se_npc)
		end
	else
		for se_npc in se_squad:squad_members() do
			se_npc = alife_object(se_npc.id)
			reward = reward + get_npc_value(se_npc)
		end
	end

	return reward
end

function Kill.complexity(entity)
	if entity._complexity then return entity._complexity end
	return 1000, 5000
end

function Kill.test(entity)
	local assert_test = igi_tests.assert_test
	entity._test_stage = (entity._test_stage or 0) + 1

	if entity._test_stage == 1 then
		local se_obj = alife_object(entity.id)
		assert_test(se_obj, "Kill entity does not exist")
		assert_test(se_obj:squad_members(), "Kill entity is not a squad")
		if igi_mcm.get_options_value("fast_tests") then
			igi_tests.teleport_to_player(se_obj)
		else
			igi_tests.travel_to_se_obj(se_obj)
		end

	elseif entity._test_stage == 2 then
		local se_obj = alife_object(entity.id)
		for se_npc in se_obj:squad_members() do
			local npc = assert(get_object_by_id(se_npc.id))
			npc:kill(db.actor)
		end
		get_object_by_id(se_obj:commander_id()):kill(db.actor)

	elseif entity._test_stage == 4 then
		assert_test(entity.status == "COMPLETED", "Quest did not complete after killing")
		return true
	end
end
