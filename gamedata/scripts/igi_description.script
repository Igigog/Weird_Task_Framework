
local trace_dbg = igi_helper.trace_dbg
local trace_assert = igi_helper.trace_assert
local WorldState = igi_world_state.WorldState

local function table_find(tbl, val)
	for k, v in pairs(tbl) do
		if v == val then return k end
	end
end

function get_description(CACHE)
	if not CACHE.description then
		CACHE.description = {
			targets = {},
			locations = {},
			factions = {},
		}

		for _, entity in pairs(CACHE.entities) do
			add_from_entity(CACHE.description, entity, CACHE.entities)
		end
	end

	local content = {}
	for label, v in pairs(CACHE.description) do
		content[#content+1] = item_to_string(v, label)
	end

	return table.concat(content, "\\n").."\\n"..get_rewards_description(CACHE)
end

function get_rewards_description(CACHE)
	local low, high = igi_rewards.guess_rewards(CACHE)
	if (low.money == 0 and high.money == 0 and low.goodwill == 0 and high.goodwill == 0) then
		return ""
	end

	return game.translate_string(igi_db.TEXT_HEADER .. "rewards")
		..
		tostring(low.money) ..
		(high.money ~= low.money and "-" .. tostring(high.money) or "") ..
		" " .. game.translate_string(igi_db.TEXT_HEADER .. "money") .. ", "
		.. tostring(low.goodwill) ..
		(high.goodwill ~= low.goodwill and "-" .. tostring(high.goodwill) or "") ..
		" " .. game.translate_string(igi_db.TEXT_HEADER .. "goodwill")
end

function get_task_text_function(CACHE)
	local mark = igi_mcm.get_options_value("wtf_task_mark") and "[WTF] " or ""
	local title = mark .. get_task_text(CACHE.description_key, "title", CACHE.task_giver_id)
	local text = get_description(CACHE)
	local icon = CACHE.icon or "ui_iconsTotal_mutant"

	return function ()
		db.actor:give_talk_message2(title, text, icon, "iconed_answer_item")
		return true
	end
end

function add_from_entity(description, entity, entities)
	if entity.no_description then return end

	local target_tbl = igi_taskdata.get_target_table(entity.target or "basic")
	local desc = target_tbl.get_description(entity)
	for k, tbl in pairs(desc) do
		link_locations(tbl, entities)
		add_all_values(description[k], tbl)
	end
end

function add_all_values(dest, src)
	for _, v in pairs(src) do
		if not table_find(dest, v) then
			dest[#dest+1] = v
		end
	end
end

function link_locations(tbl, entities)
	for k, v in pairs(tbl) do
		if type(v) == "string" then
			local link = igi_text_processor.try_str_to_link(v)
			if link then
				local loc = link:resolve(entities)
				tbl[k] = igi_target_basic.get_location_description(loc)
			end
		end
	end
end

function item_to_string(item, label)
	if not next(item) then return "" end

	local details = {}
	for i, value in ipairs(item) do
		details[i] = game.translate_string(value)
	end

	label = game.translate_string(igi_db.TEXT_HEADER..label)
	return label..": "..table.concat(details, ', ')
end

function get_task_text(desc_key, field, tg_id)
	desc_key = desc_key or ""
	local se_tg = igi_world_state.WorldState.objects[tg_id]
	local tg_name = se_tg:section_name() ~= "m_trader" and se_tg:section_name() or se_tg:name()

	-- returns exclusive task text if exists
	local text_id = igi_db.TEXT_HEADER..tg_name.."_"..desc_key.."_"..field
	local text = game.translate_string(text_id)
	if text ~= text_id then return text end

	-- fallback to basic field for this task type
	local basic_text_id = igi_db.TEXT_HEADER..desc_key.."_"..field
	text = game.translate_string(basic_text_id)
	if text ~= basic_text_id then return text end

	-- fallback to basic field
	trace_dbg("No description for key: "..desc_key, text_id, basic_text_id)
	return game.translate_string(igi_db.TEXT_HEADER..field)
end
