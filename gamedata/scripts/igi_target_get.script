TARGET_NAME = "get"
PATTERN = "basic"
FUNCTORS = {
	status = {script_name()..".status"},
}

local TASK_STATUSES = igi_subtask.TASK_STATUSES
local WorldState = igi_world_state.WorldState

function is_completed(se_obj)
	-- Complete if in player inventory
	return se_obj.parent_id == 0
end

function is_failed(se_obj, section_name)
	if not se_obj then return true end
	if se_obj:section_name() ~= section_name then return true end
end


function status(entity)
	local se_obj = WorldState.objects[entity.id]
	if is_failed(se_obj, entity.section_name) then return TASK_STATUSES.FAILED end
	if is_completed(se_obj) then return TASK_STATUSES.COMPLETED end
	return TASK_STATUSES.RUNNING
end

function quest_target(obj_data)
	local se_obj = WorldState.objects[obj_data.id]
	if se_obj.parent_id == 65535 then
		return obj_data.id
	else
		return se_obj.parent_id
	end
end

function get_complexity(entity)
	return 0
end

function test(entity)
	local assert_test = igi_tests.assert_test
	entity._test_stage = (entity._test_stage or 0) + 1
	if not entity._test_stage == 1 then
		local se_obj = igi_entities.get_binded_object(entity)
		assert_test(se_obj, "Entity does not exist")
		if igi_mcm.get_options_value("fast_tests") then
			igi_tests.teleport_to_player(se_obj)
		else
			igi_tests.travel_to_se_obj(se_obj)
		end

	elseif entity._test_stage == 2 then
		local se_obj = igi_entities.get_binded_object(entity)
		local obj = igi_helper.level_object(se_obj.id)
		db.actor:transfer_item(obj, db.actor)

	elseif entity._test_stage == 3 then
		assert_test(entity.status == "COMPLETED", "Quest did not complete")
		return true
	end
end
igi_tests.register_subtask_test("test_target_get", {
	entities = {
		{
			entity_type = "item",
			section_name = "itm_drugkit",
			target = "get",
			to_create =  true,
			where =  "[smart.id]",
		},

		{
			entity_type = "location",
			search_for =  "smart",
			where = "0,0",
			link_id = "smart",
		}
	}
})
