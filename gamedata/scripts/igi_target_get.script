local TASK_STATUSES = igi_subtask.TASK_STATUSES
local trace_assert = igi_helper.trace_assert

Get = {}
function Get.on_init(entity)
	trace_assert(type(entity.id) == "number", "Get: entity.id is not a number", entity)
	trace_assert(alife_object(entity.id), "Get: no server object for this id", entity)
end

function Get.status(entity)
	local se_obj = alife_object(entity.id)
	if not se_obj then return TASK_STATUSES.FAILED end
	if se_obj.parent_id == 0 then return TASK_STATUSES.COMPLETED end
	return TASK_STATUSES.RUNNING
end

function Get.quest_target(obj_data)
	local se_obj = assert(alife_object(obj_data.id))
	if se_obj.parent_id == 65535 then
		return obj_data.id
	else
		return se_obj.parent_id
	end
end

function Get.complexity(entity)
	return 0
end

function Get.test(entity)
	local assert_test = igi_tests.assert_test
	entity._test_stage = (entity._test_stage or 0) + 1
	if not entity._test_stage == 1 then
		local se_obj = alife_object(entity.id)
		assert_test(se_obj, "Entity does not exist")
		if igi_mcm.get_options_value("fast_tests") then
			igi_tests.teleport_to_player(se_obj)
		else
			igi_tests.travel_to_se_obj(se_obj)
		end

	elseif entity._test_stage == 2 then
		local se_obj = alife_object(entity.id)
		local obj = get_object_by_id(se_obj.id)
		db.actor:transfer_item(obj, db.actor)

	elseif entity._test_stage == 3 then
		assert_test(entity.status == "COMPLETED", "Quest did not complete")
		return true
	end
end
