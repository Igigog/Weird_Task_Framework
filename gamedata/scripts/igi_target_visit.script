local trace_assert = igi_helper.trace_assert
MAX_DISTANCE_SQR = 2500

local function distance(position_1, position_2)
	local x = position_1.x - position_2.x
    local z = position_1.z - position_2.z
	return x*x + z*z
end

local function get_level_id(se_obj)
	---@diagnostic disable-next-line: undefined-field
	return game_graph():vertex(se_obj.m_game_vertex_id):level_id()
end

function is_complete(obj_data)
	local target = assert(alife_object(obj_data.id))
	local actor = assert(alife_object(0))
	if get_level_id(target) ~= get_level_id(actor) then
		return false end
	return distance(target.position, actor.position) < MAX_DISTANCE_SQR
end

Visit = {}
function Visit.on_init(entity)
	trace_assert(type(entity.id) == "number", "Visit: entity.id is not a number", entity)
	trace_assert(alife_object(entity.id), "Visit: no server object for this id", entity)
end

function Visit.status(subtask)
    if is_complete(subtask) then return igi_subtask.TASK_STATUSES.COMPLETED end
    return igi_subtask.TASK_STATUSES.RUNNING
end

function Visit.quest_target(entity)
	return entity.id
end

function Visit.complexity(entity)
	return 500
end

function Visit.test(entity)
	local assert_test = igi_tests.assert_test
	entity._test_stage = (entity._test_stage or 0) + 1

	if entity._test_stage == 1 then
		local se_obj = alife_object(entity.id)
		assert_test(se_obj, "Entity does not exist")
		db.actor:set_actor_position(se_obj.position)

	elseif entity._test_stage == 2 then
		assert_test(entity.status == "COMPLETED", "Quest did not complete")
		return true
	end
end
