TARGET_NAME = "visit"
PATTERN = "basic"
FUNCTORS = {
	setup = {"igi_helper.noop"},
	create = {"igi_helper.noop"},
	status = {script_name()..".status"},
	cleanup = {},
}

local WorldState = igi_world_state.WorldState
local trace_dbg = igi_helper.trace_dbg
local trace_assert = igi_helper.trace_assert
MAX_DISTANCE_SQR = 2500

local function distance(position_1, position_2)
	local x = position_1.x - position_2.x
    local z = position_1.z - position_2.z
	return x*x + z*z
end

local function get_level_id(se_obj)
	return WorldState.gg:vertex(se_obj.m_game_vertex_id):level_id()
end

function is_complete(obj_data)
	local target = WorldState.objects[obj_data.id]
	local actor = WorldState.objects[0]
	if get_level_id(target) ~= get_level_id(actor) then
		return false end
	return distance(target.position, actor.position) < MAX_DISTANCE_SQR
end

function status(subtask)
    if is_complete(subtask) then return igi_subtask.TASK_STATUSES.COMPLETED end
    return igi_subtask.TASK_STATUSES.RUNNING
end

function get_complexity(entity)
	return 500
end

function test(entity)
	local assert_test = igi_tests.assert_test
	entity._test_stage = (entity._test_stage or 0) + 1

	if entity._test_stage == 1 then
		local se_obj = igi_entities.get_binded_object(entity)
		assert_test(se_obj, "Entity does not exist")
		db.actor:set_actor_position(se_obj.position)

	elseif entity._test_stage == 2 then
		assert_test(entity.status == "COMPLETED", "Quest did not complete")
		return true
	end
end
igi_tests.register_subtask_test("test_target_visit", {
	entities = {
		{
			entity_type = "location",
			search_for =  "smart",
			where = "0,0",
			target = "visit",
		}
	}
})
