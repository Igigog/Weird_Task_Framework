local TASK_STATUSES = igi_subtask.TASK_STATUSES
local WorldState = igi_world_state.WorldState


function make_companion(entity)
	local squad = alife_object(entity.id)

	axr_companions.companion_squads[squad.id] = squad
	for k in squad:squad_members() do
		local se_obj = k.object or k.id and alife_object(k.id)
		se_save_var(se_obj.id,se_obj:name(),"companion",true)
		se_save_var(se_obj.id,se_obj:name(),"companion_cannot_dismiss",true)
		se_save_var(se_obj.id,se_obj:name(),"companion_cannot_teleport",entity.cant_teleport == "true")
	end

	-- Add to ignore offline combat simulation list
	sim_offline_combat.task_squads[squad.id] = true
end

Escort = {}
function Escort.status(entity)
    return TASK_STATUSES.READY_TO_FINISH
end

function Escort.entity_on_complete(entity)
    local se_squad = igi_helper.get_binded_object(entity)
    axr_companions.dismiss_special_squad(se_squad)
end

function Escort.test(entity)
	local assert_test = igi_tests.assert_test
	local se_squad = igi_helper.get_binded_object(entity)
	for member in se_squad:squad_members() do
		local se_npc = igi_world_state.alife_object(member.id)
		assert_test(
			se_load_var(se_npc.id, se_npc:name(), "companion"), "Not in actor's squad")
	end
	assert_test(entity.status == "READY_TO_FINISH", "Quest did not complete")
	return true
end
igi_tests.register_subtask_test("test_target_escort", {
	entities = {
		{
			entity_type = "squad",
			section_name = "army_sim_squad_novice",
			to_create = true,
			where = "[smart.id]",
			target = "escort"
		},

		{
			entity_type = "location",
			search_for = "smart",
			where = "0,0",
			link_id = "smart",
		}
	}
})
