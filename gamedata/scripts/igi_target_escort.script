local TASK_STATUSES = igi_subtask.TASK_STATUSES
local trace_assert = igi_helper.trace_assert

function make_companion(entity)
	local squad = alife_object(entity.id)

	axr_companions.companion_squads[squad.id] = squad
	for k in squad:squad_members() do
		local se_obj = k.object or k.id and alife_object(k.id)
		se_save_var(se_obj.id,se_obj:name(),"companion",true)
		se_save_var(se_obj.id,se_obj:name(),"companion_cannot_dismiss",true)
		se_save_var(se_obj.id,se_obj:name(),"companion_cannot_teleport",entity.cant_teleport == "true")
	end

	-- Add to ignore offline combat simulation list
	sim_offline_combat.task_squads[squad.id] = true
end

Escort = {}
function Escort.entity_on_first_run(entity)
	trace_assert(type(entity.id) == "number", "Escort: entity.id is not a number", entity)
	trace_assert(alife_object(entity.id), "Escort: no server object for this id", entity)
	trace_assert(alife_object(entity.id):commander_id(), "Escort: entity.id is not a squad", entity)
end

function Escort.status(entity)
    return TASK_STATUSES.READY_TO_FINISH
end

function Escort.entity_on_finish(entity)
    local se_squad = alife_object(entity.id)
    local _ = se_squad and axr_companions.dismiss_special_squad(se_squad)
end

function Escort.test(entity)
	local assert_test = igi_tests.assert_test
	local se_squad = alife_object(entity.id)
	for member in se_squad:squad_members() do
		local se_npc = alife_object(member.id)
		assert_test(
			se_load_var(se_npc.id, se_npc:name(), "companion"), "Not in actor's squad")
	end
	assert_test(entity.status == "READY_TO_FINISH", "Quest did not complete")
	return true
end
