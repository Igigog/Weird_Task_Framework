db_ini = ini_file_ex("igi_tasks\\base.ltx")

function get_task_name(task_id)
	return task_id[1], task_id[2]
end

function smart_by_name(name)
	return SIMBOARD.smarts_by_names[name]
end


function is_common_npc(id)
	--Parameter is correct | not world map | not player |
	local npc = id and (id ~= 65535) and (id ~= 0) and alife_object(id)
	--Exist | is stalker | alive |
	if not (npc and IsStalker(nil,npc:clsid()) and npc:alive()) then return false end
	--section_name has "sim_default", not "zombied"
	if not (string.find(npc:section_name(),"sim_default") and (not string.find(npc:section_name(),"zombied"))) then return false end
	--Not a special npc
	if not ((get_object_story_id(id) == nil) and (npc.group_id ~= 65535) and (get_object_story_id(npc.group_id) == nil)) then return false end
	--Squad
	local squad = get_object_squad(npc)
	if not (squad) then return false end
	--Smart
	local smart_id = squad.current_target_id
	local smrt = smart_id and SIMBOARD.smarts[smart_id]
	local smart = smrt and smrt.smrt
	local smart_name = smart and smart:name()
	--Fancy checking smart and squad
	if (smart_name and simulation_objects.base_smarts[smart_name] == true) then return false end
	if (squad:get_script_target()) then return false end

	return true
end

function get_binded_object(entity)
	trace_assert(entity.section_name and entity.id, "Entity is not binded or id was removed", entity)
	local se_obj = alife_object(entity.id)
	if (not se_obj) or se_obj:section_name() ~= entity.section_name then return end
	return se_obj
end


function get_object_level_id(se_obj)
	trace_assert(se_obj, "No se_obj")
	if se_obj.parent_id ~= 65535 then
		-- inside inventory
		se_obj = alife_object(se_obj.parent_id)
	end

	---@diagnostic disable-next-line: undefined-field
	return game_graph():vertex(se_obj.m_game_vertex_id):level_id()
end

function get_faction_enemies(faction)
	local excluded = {
		monolith = true,
		renegade = true,
		greh = true,
		isg = true,
	}
	local enemies_set = {}
	local factions = game_relations.factions_table

	for _, enemy_faction in pairs(factions) do
		if (game_relations.is_factions_enemies(faction, enemy_faction)) then
			if not excluded[enemy_faction] then
				enemies_set[enemy_faction] = true
			end
		end
	end
	return enemies_set
end

function pcall(f, ...)
	if type(f) ~= "function" then
		callstack()
		return false, "Not a function"
	end
	local xf = coroutine.create(f)
	local ok, res = coroutine.resume(xf, ...)
	if not ok then
		return ok, debug.traceback(xf, res .. "\\n")
	end
	return ok, res
end

function trace_dbg(title, ...)
	if igi_mcm.get_options_value("debug") then
		printf("WTF DBG: "..title .. "\n" .. format_log({...}))
	end
end

function trace_error(title, ...)
	local val = "WTF ERROR: " .. title .. "\n" .. format_log({...})
	printf(val)
	if igi_mcm.get_options_value("debug") then
		news_manager.send_tip(db.actor, string.gsub(val, "\n", "\\n"), nil, nil, 30000)
	end
end

function format_log(tbl)
	local val = {}
	for k, v in pairs(tbl) do
		if type(v) == "table" then
			val[#val+1] = utils_data.print_table(v, k, true)
		else
			val[#val + 1] = tostring(v)
		end
	end
	val[#val + 1] = "-------------------------"
	return table.concat(val, "\n")
end

function trace_assert(val, err, ...)
	if not val then
		callstack()
		trace_dbg("Assertion failed! ", err, ...)
		assert(nil, "WTF: "..err .. "\n" .. format_log({...}))
	end
	return val
end

function get_community_by_id(id)
	local se_obj = assert(alife_object(id))
	---@diagnostic disable-next-line: undefined-field
	if se_obj:clsid() == clsid.online_offline_group_s then
		se_obj = assert(alife_object(se_obj:commander_id()))
	end

	if se_obj:section_name() == "m_trader" then
		return "stalker"	-- Sid, Forester
	end

	local community = assert(alife_character_community(se_obj))
	if community:find("trader") then
		return db_ini:r_value("trader_faction", se_obj:section_name())
	end
	return community
end

local fCache = {}

function eval(v, env)
	local f = fCache[v]
	if f == nil then
		f = loadstring("return " .. v)
		fCache[v] = f
	end
	assert(f, "Unreachable")

	setfenv(f, setmetatable(env or {}, {__index = _G}))
	return f()
end
