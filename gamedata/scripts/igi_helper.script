-- There are functions that are used by other complex functions
-- I HAVE NO FUCKING IDEA WHY
-- but sometimes(!) you can access global functions only through filename.functionname()

local WorldState = igi_world_state.WorldState

function level_object(id)
	id = tonumber(id)
	if not id then
		callstack()
		trace_assert(nil, "Don't look at me, senpai >//////<\n")
	end
	return level.object_by_id(id)
end

function se_object(id)
	return WorldState[id]
end

function get_task_name(task_id)
	return task_id[1], task_id[2]
end


function is_common_npc(id)
	--Parameter is correct | not world map | not player |
	local npc = id and (id ~= 65535) and (id ~= 0) and WorldState.objects[id]
	--Exist | is stalker | alive |
	if not (npc and IsStalker(nil,npc:clsid()) and npc:alive()) then return false end
	--section_name has "sim_default", not "zombied"
	if not (string.find(npc:section_name(),"sim_default") and (not string.find(npc:section_name(),"zombied"))) then return false end
	--Not a special npc
	if not ((get_object_story_id(id) == nil) and (npc.group_id ~= 65535) and (get_object_story_id(npc.group_id) == nil)) then return false end
	--Squad
	local squad = get_object_squad(npc)
	if not (squad) then return false end
	--Smart
	local smart_id = squad.current_target_id
	local smrt = smart_id and SIMBOARD.smarts[smart_id]
	local smart = smrt and smrt.smrt
	local smart_name = smart and smart:name()
	--Fancy checking smart and squad
	if (smart_name and simulation_objects.base_smarts[smart_name] == true) then return false end
	if (squad:get_script_target()) then return false end

	return true
end


function get_object_level_id(se_obj)
	trace_assert(se_obj, "No se_obj")
	if se_obj.parent_id ~= 65535 then
		-- inside inventory
		se_obj = WorldState.objects[se_obj.parent_id]
	end

	return game_graph():vertex(se_obj.m_game_vertex_id):level_id()
end

function get_object_level(obj)
	return WorldState.sim:level_name(igi_helper.get_object_level_id(obj))
end

function get_faction_enemies(faction)
	local excluded = {
		monolith = true,
		renegade = true,
		greh = true,
		isg = true,
	}
	local enemies_set = {}
	local factions = game_relations.factions_table

	for _, enemy_faction in pairs(factions) do
		if (game_relations.is_factions_enemies(faction, enemy_faction)) then
			if not excluded[enemy_faction] then
				enemies_set[enemy_faction] = true
			end
		end
	end
	return enemies_set
end


function trace_dbg(title, ...)
	if igi_mcm.get_options_value("debug") then
		printf("WTF DBG: "..title)
		for k, v in pairs({...}) do
			if type(v) == "table" then
				printf(utils_data.print_table(v, k, true))
			else
				printf(tostring(v))
			end
		end
		printf("-------------------------")
	end
end

function trace_error(title, ...)
	local val = {}
	val[#val + 1] = "WTF ERROR: " .. title
	for k, v in pairs({ ... }) do
		if type(v) == "table" then
			val[#val+1] = utils_data.print_table(v, k, true)
		else
			val[#val + 1] = tostring(v)
		end
	end
	val[#val + 1] = "-------------------------"
	printf(table.concat(val, "\n"))
	if igi_mcm.get_options_value("debug") then
		news_manager.send_tip(db.actor, table.concat(val, "\\n"), nil, nil, 30000)
	end
end

function trace_assert(val, err, ...)
	if not val then
		callstack()
		trace_dbg("Assertion failed! ", err, ...)
		assert(nil, "WTF: "..err)
	end
	return val
end

function get_community_by_id(id)
	local se_obj = WorldState.objects[id]
	if se_obj:clsid() == clsid.online_offline_group_s then
		se_obj = WorldState.objects[se_obj:commander_id()]
	end

	if se_obj:section_name() == "m_trader" then
		return "stalker"	-- Sid, Forester
	end

	local community = alife_character_community(se_obj)
	if community:find("trader") then
		return igi_db.get_value("misc.ltx", "trader_faction", se_obj:section_name())
	end
	return community
end

function find_in_game_object(entity, field)
	local se_obj = igi_entities.get_binded_object(entity)
	if type(se_obj[field]) == "function" then
		return se_obj[field]()
	end
	return se_obj[field]
end

function lookup_functor(name, origin)
	local f = igi_utils.lookup_path(name, origin)
	if not f then
		trace_assert(f, "Can't find functor! name: "..name)
	end
	return f
end

local fCache = {}

function eval(v)
	local f = fCache[v]
	if f == nil then
		local nf = loadstring("return " .. v)
		fCache[v] = nf
		---@diagnostic disable-next-line: need-check-nil
		return nf()
	end
	return f()
end
