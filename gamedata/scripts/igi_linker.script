local trace_dbg = igi_helper.trace_dbg
local trace_assert = igi_helper.trace_assert

Link = {
	new = function (link_id, field, is_se_object_link)
		local t = {
			link_id = link_id,
			field = field,
			look_in_se_object = is_se_object_link,
		}

		return setmetatable(t, {__index = Link})
	end,

	is_pointed_to = function (self, entity)
		return self.link_id == entity.link_id
	end,

	is_se_object_link = function (self)
		return self.look_in_se_object
	end,

    resolve = function(self, entities)
		local entity = self:get_linked_entity(entities)
		trace_assert(entity, "Linker can't find entity for link:", self)
		local out = self:resolve_field(entity)
		return out and tostring(out) or nil
	end,

	resolve_field = function(self, entity)
		if self.look_in_se_object and not entity.tags.BINDED then
			return nil
		end
		if (self.look_in_se_object) then
			return igi_helper.find_in_game_object(entity, self.field)
		end
		return entity[self.field]
    end,

	get_linked_entity = function(self, entities)
        for _, entity in pairs(entities) do
            if self:is_pointed_to(entity) then
                return entity
            end
        end
	end,
}

function broadcast_entity(entities, entity)
	if not entity.link_id then return end
	for k,v in pairs(entities) do
		if type(v) == 'string' then
			entities[k] = igi_text_processor.link_entity(v, entity)
		elseif type(v) == 'table' then
			broadcast_entity(v, entity)
		end
	end
end
