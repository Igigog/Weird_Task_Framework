local trace_dbg = igi_helper.trace_dbg
local trace_assert = igi_helper.trace_assert

LinkContext  = {
	new = function(self, CACHE)
		local link_context = {
			CACHE = CACHE,
			this = {}
		}
		for _, entity in pairs(CACHE.entities) do
			if entity.link_id then
				trace_assert(link_context[entity.link_id] == nil, "Entity already in context", link_context, entity)
				link_context[entity.link_id] = entity
			end
		end
		return setmetatable(link_context, { __index = self })
	end,

	set_this = function(self, entity)
		self.this = entity
	end,

	get = function(self, key)
		return self[key]
	end,
}

Link = {
	new = function (link_id, field)
		local t = {
			link_id = link_id,
			field = field,
		}

		return setmetatable(t, {__index = Link})
	end,

	is_pointed_to = function (self, entity)
		return self.link_id == entity.link_id
	end,

	points_to_self = function (self)
		return self.link_id == "this"
	end,

    resolve = function(self, link_context)
		trace_dbg("Link resolve", self, link_context)
		local entity = link_context:get(self.link_id)
		trace_assert(entity, "Linker can't find entity for link:", self)
		local out = self:resolve_field(entity)
		return out and tostring(out) or nil
	end,

	resolve_field = function(self, entity)
		return entity[self.field]
    end,
}

function broadcast_entity(entities, entity)
	if not entity.link_id then return end
	for k,v in pairs(entities) do
		if type(v) == 'string' then
			entities[k] = igi_text_processor.link_entity(v, entity)
		elseif type(v) == 'table' then
			broadcast_entity(v, entity)
		end
	end
end
