Tree = igi_mcm_builder.Tree
Page = igi_mcm_builder.Page
ImageWithText = igi_mcm_builder.ImageWithText
Checkbox = igi_mcm_builder.Checkbox
Trackbar = igi_mcm_builder.Trackbar
Title = igi_mcm_builder.Title
Line = igi_mcm_builder.Line
InputField = igi_mcm_builder.InputField
Description = igi_mcm_builder.Description

function on_game_start()
	assert(ui_mcm, "Weird Tasks Framework: MCM not installed. Fuck you.")
end

OPTION_IDS = {}
OPTION_DEFAULTS = {}

function add_mcm_option(key, default, name)
    if not name then name = key end
    if not OPTION_IDS[key] then OPTION_IDS[key] = name end
	if default then OPTION_DEFAULTS[name] = default end
end

local function get_default_option(option_id)
	return OPTION_DEFAULTS[option_id]
end

local function get_mcm_option(option_id)
	return ui_mcm.get("igi_tasks/Options/"..option_id)
end
get_options_value = get_mcm_option

local function task_table_value(task_name, prefix, path)
	local tbl = igi_taskdata.get_task_table(task_name, prefix)

	local cur_tbl = tbl
	for i=1,#path-1 do
		cur_tbl = cur_tbl[path[i]]
		if not cur_tbl then return nil end
	end

	return cur_tbl[path[#path]]
end

local function set_config_value(task_name, prefix, path, value)
	igi_taskdata.update_task_config_value(task_name, prefix, path, value)
end

function reset_all_tasks(task, prefix)
	for task_id in pairs(igi_generic_task.TASKS_CACHE) do
		if string.find(task_id, prefix..task) then
			task_manager.get_task_manager():set_task_completed(task_id)
		end
	end
end

local function create_disable_widgets(task, prefix)
	local check = Checkbox.new("check_disabled")
		:hint("igi_tasks_disable_task")
		:current_value({task_table_value, task, prefix, {"disabled"}})
		:callback({set_config_value, task, prefix, {"disabled"}})
	return Page.new(''):add(check)
end

local function create_cancel_widgets(task, prefix)
	local check = Checkbox.new("cancel_all")
		:hint("igi_tasks_cancel_all")
		:current_value({function() return false end})
		:callback({reset_all_tasks, task, prefix})
	return Page.new(''):add(check)
end

local function build_task_page(task, prefix)
	local page = Page.new(task):text("igi_task_text_"..prefix.."_"..task.."_title")
	page:add(Title.new(task):text("igi_task_text_"..prefix.."_"..task.."_title"))
	page:merge(create_disable_widgets(task, prefix))
	page:merge(create_cancel_widgets(task, prefix))
	page:add(Line.new())
	return page
end

local function build_task_pack_tree(meta_section)
	igi_taskdata.create_path(meta_section.prefix)
	local files = getFS():file_list_open("$game_config$",
		"igi_tasks\\tasks\\"..meta_section.prefix.."\\",
		1+4+8)

	local tree = Tree.new(meta_section.name):text(meta_section.name)
	for i=0,files:Size()-1 do
		local task = files:GetAt(i)
		tree:add_page(build_task_page(task, meta_section.prefix))
	end
	return tree
end

local function get_basic_rewards_page()
	local money_coeff = Trackbar.new("money_reward_coeff")
	local goodwill_coeff = Trackbar.new("goodwill_reward_coeff")
	return Page.new('')
		:add(money_coeff)
		:add(goodwill_coeff)
end

local function get_options_page()
	local page = Page.new("Options")
	page:add(ImageWithText.new("title")
				:image("ui_options_slider_player")
				:text("ui_mcm_igi_tasks_title"))

	for _, id in pairs(OPTION_IDS) do
		local default = get_default_option(id)
		page:add(Checkbox.new(id):default(default))
	end

	page:add(Checkbox.new("reset_all")
		:current_value({function () return false end})
		:callback({igi_taskdata.reset_all_custom_tables})
	)

	page:merge(get_basic_rewards_page())
	return page
end

local function reset_tasks_on_new_framework()
	local TASKS_VERSION = igi_generic_task.TASKS_VERSION
	local old_version = axr_main.config:r_value("igi_tasks", "tasks_version", 0)
	if old_version ~= TASKS_VERSION then
		printf("Updating WTF: ", old_version, "=>", TASKS_VERSION)
		axr_main.config:w_value("igi_tasks", "tasks_version", TASKS_VERSION)
		axr_main.config:save()
		if old_version then
			igi_taskdata.reset_all_custom_tables()
		end
	end
end

function on_mcm_load()
	reset_tasks_on_new_framework()
	igi_mcm_features.add_mcm_options()
	local tree = Tree.new("igi_tasks")
	tree:add_page(get_options_page())

	local meta_ltx = igi_db.LtxView("pack_meta\\base_meta.ltx")
	for _, meta_section in meta_ltx:iter() do
		tree:add_subtree(build_task_pack_tree(meta_section))
	end
	return tree:build()
end
