Tree = igi_mcm_builder.Tree
Page = igi_mcm_builder.Page
ImageWithText = igi_mcm_builder.ImageWithText
Checkbox = igi_mcm_builder.Checkbox
Trackbar = igi_mcm_builder.Trackbar
Title = igi_mcm_builder.Title
Line = igi_mcm_builder.Line
InputField = igi_mcm_builder.InputField
Description = igi_mcm_builder.Description

function on_game_start()
	assert(ui_mcm, "Weird Tasks Framework: MCM not installed. Fuck you.")
	autosave_on_game_start()
	autocomplete_on_game_start()
end

function get_options_value(option_id)
	return ui_mcm.get("igi_tasks/Options/"..option_id)
end

function get_task_value(quest_id, key)
	if not quest_id then return end
	local prefix, task_name = quest_id[1], quest_id[2]
	return ui_mcm.get("igi_tasks/" .. prefix .. "/" .. task_name .. "/" .. key)
end

function reset_all_tasks(task, prefix)
	for task_id in pairs(igi_generic_task.TASKS_CACHE) do
		if string.find(task_id, prefix..task) then
			task_manager.get_task_manager():set_task_completed(task_id)
		end
	end
end

local function build_task_page(task, prefix)
	local page = Page.new(task):text("igi_task_text_"..prefix.."_"..task.."_title")
	page:add(Title.new(task):text("igi_task_text_"..prefix.."_"..task.."_title"))
	page:add(
		Checkbox.new("disabled")
			:hint("igi_tasks_disable_task")
	)
	return page
end

local function build_task_pack_tree(prefix, names)
	local tree = Tree.new(prefix):text(prefix)
	for task_name in pairs(names) do
		tree:add_page(build_task_page(task_name, prefix))
	end
	return tree
end

local function get_options_page()
	local page = Page.new("Options")
	page:add(ImageWithText.new("title")
				:image("ui_options_slider_player")
				:text("ui_mcm_igi_tasks_title"))

	-- Settings
	page:add(Checkbox.new("autosave_before"):default(false))
	page:add(Checkbox.new("autosave_after"):default(false))
	page:add(Checkbox.new("autocomplete"):default(false))
	page:add(Checkbox.new("realistic_assassinations"):default(false))
	page:add(Checkbox.new("utjan_fetch_thing"):default(true))
	page:add(Checkbox.new("wtf_task_mark"):default(true))
	page:add(Checkbox.new("wtf_crash_message"):default(true))

	page:add(Line.new())
	page:add(Title.new("rewards"):text("ui_mcm_igi_tasks_rewards"))
	page:add(Checkbox.new("show_rewards"):default(true))
	page:add(Trackbar.new("money_reward_coeff"))
	page:add(Trackbar.new("goodwill_reward_coeff"))

	page:add(Line.new())
	page:add(Title.new("devzone"):text("ui_mcm_igi_tasks_devzone"))
	page:add(igi_mcm_builder.List.new("cancel_task")
		:dont_translate()
		:content({ function ()
			local out = {{1, "-"}}
			for k in pairs(igi_generic_task.TASKS_CACHE) do
				out[#out+1] = k ~= "TASKS_VERSION" and {k, k} or nil
			end
			return out
		end})
		:current_value({ function ()
			return {1, "-"}
		end})
		:callback({ function (task_id)
			task_manager.get_task_manager():set_task_completed(task_id)
		end}))
	page:add(Checkbox.new("debug"):default(false))
	page:add(Checkbox.new("fast_tests"):default(false))
	page:add(Checkbox.new("integration_tests_quest")
		:current_value({ function() return false end })
		:callback({ function() igi_tests.start_integration_tests() end, }))
	page:add(Checkbox.new("unit_tests")
		:current_value({ function() return false end })
		:callback({ function() igi_tests.start_normal_tests() end, }))
	page:add(Checkbox.new("flush_logs")
		:current_value({ function() return false end })
		:callback({ function() flush() end, }))
	return page
end

local function reset_tasks_on_new_framework()
	local TASKS_VERSION = igi_generic_task.TASKS_VERSION
	local old_version = axr_main.config:r_value("igi_tasks", "tasks_version", 0)
	if old_version ~= TASKS_VERSION then
		printf("Updating WTF: ", old_version, "=>", TASKS_VERSION)
		axr_main.config:w_value("igi_tasks", "tasks_version", TASKS_VERSION)
		axr_main.config:save()
	end
end

function on_mcm_load()
	reset_tasks_on_new_framework()
	local tree = Tree.new("igi_tasks")
	tree:add_page(get_options_page())

	for prefix, names in pairs(igi_taskdata.get_all_quests()) do
		tree:add_subtree(build_task_pack_tree(prefix, names))
	end
	return tree:build()
end

---------------- AUTOSAVE -------------------

function autosave_on_first_run(CACHE)
	if not get_options_value("autosave_before") then return end
	local title = igi_description.get_task_text(CACHE.description_key, "name", CACHE.task_giver_id)
	CreateTimeEvent("igi_mcm_features", "autosave_before", 0, function()
		exec_console_cmd("save " .. "task " .. title .. " started")
		return true
	end)
end

function autosave_on_finish(CACHE)
	if not get_options_value("autosave_after") then return end
	local title = igi_description.get_task_text(CACHE.description_key, "name", CACHE.task_giver_id)
	CreateTimeEvent("igi_mcm_features", "autosave_after", 0, function()
		exec_console_cmd("save " .. "task " .. title .. " finished")
		return true
	end)
end

function autosave_on_game_start()
	igi_callbacks.add_callback("on_first_run", autosave_on_first_run)
	igi_callbacks.add_callback("on_finish", autosave_on_finish)
end

---------------- AUTOCOMPLETE -------------------

function autocomplete(CACHE)
	if not get_options_value("autocomplete") then return end
	if CACHE.status ~= "COMPLETED" then return end
	task_manager.get_task_manager():set_task_completed(CACHE.task_id)
end

function autocomplete_on_game_start()
	igi_callbacks.add_callback("on_task_update", autocomplete)
end
