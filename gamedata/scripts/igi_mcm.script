local trace_assert = igi_helper.trace_assert

function on_game_start()
	assert(ui_mcm, "Weird Tasks Framework: MCM not installed. Fuck you.")
end

OPTION_IDS = {}
OPTION_DEFAULTS = {}

function add_mcm_option(key, default, name)
    if not name then name = key end
    if not OPTION_IDS[key] then OPTION_IDS[key] = name end
	if default then OPTION_DEFAULTS[name] = default end
end

local function get_default_option(option_id)
	return OPTION_DEFAULTS[option_id]
end

local function get_mcm_option(option_id)
	return ui_mcm.get("igi_tasks/Options/"..option_id)
end
get_options_value = get_mcm_option

local function task_table_value(task_name, prefix, key)
	return igi_taskdata.get_task_table(task_name, prefix)[key]
end

local function toggle_boolean(task_name, prefix, key)
	local val = not task_table_value(task_name, prefix, key)
	igi_taskdata.update_task_table_value(task_name, prefix, key, val)
end

function reset_all_tasks(task, prefix)
	for task_id in pairs(igi_generic_task.TASKS_CACHE) do
		local task_prefix, task_name = igi_helper.get_task_name(task_id)
		if task_prefix == prefix and task_name == task then
			task_manager.get_task_manager():set_task_completed(task_id)
		end
	end
end

local function build_task_entry(task, prefix, path)
	local entry = {
		id=task, sh=true, text="igi_task_text_"..prefix.."_"..task.."_title", gr={
			{id = "check_disabled", type = "check", hint="igi_tasks_disable_task", val = 1, 
			curr = {task_table_value, task, prefix, "disabled"},
			functor = {toggle_boolean, task, prefix, "disabled"}},
			
			{id = "cancel_all", type = "check", hint = "igi_tasks_cancel_all", val=1,
			curr = {function () return false end},
			functor = {reset_all_tasks, task, prefix}
		}
		}
	}
	return entry
end

local function build_tasks_entries(prefix, path)
	igi_taskdata.create_path(prefix)
	local entries = {}
	local files = getFS():file_list_open("$game_config$", 
		"igi_tasks\\tasks\\"..prefix.."\\",
		1+4+8)

	for i=0,files:Size()-1 do
		entries[#entries+1] = build_task_entry(files:GetAt(i), prefix, path)
	end
	return entries
end

local function build_task_pack_entry(meta_section, path)
	local tbl = {
		id=meta_section.name,
		text=meta_section.name,
		sh=false,
		gr=build_tasks_entries(meta_section.prefix, path..meta_section.name.."/")
	}
	return tbl
end

local function build_task_packs_entries()
	local entries = {}
	local meta_ltx = igi_db.LtxView("pack_meta\\base_meta.ltx")

	for k, meta_section in meta_ltx:iter() do
		entries[#entries+1] = build_task_pack_entry(meta_section, "")
	end
	return entries
end

local function build_option_entries()
	local entries = {}
	for _, id in pairs(OPTION_IDS) do
		entries[#entries+1] = {
			id = id,
			type = "check",
			val = 1,
			def = get_default_option(id)
		}
	end
	return entries
end

function on_mcm_load()
	igi_mcm_features.add_mcm_options()
	local op = {id= "igi_tasks", sh=false, gr={
					{id="Options", sh=true, gr={
						{id="title", type="slide", link="ui_options_slider_player", text="ui_mcm_igi_tasks_title", size={512,50}},
					}}
				}
			}
	igi_utils.extend_list(op.gr[1].gr, build_option_entries())
    igi_utils.extend_list(op.gr, build_task_packs_entries())
	return op
end
