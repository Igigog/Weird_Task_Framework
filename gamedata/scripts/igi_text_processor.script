trace_assert  = igi_helper.trace_assert

local fCache = {}
local function eval(v)
	local f = fCache[v]
	if f == nil then
		f = loadstring("return " .. v)
		fCache[v] = f
	end
	assert(f, "Function cannot be compiled: " .. (v or nil))
	return f()
end

LinkContext  = {
	_NO_THIS = {},

	new = function(self, CACHE)
		local link_context = {
			CACHE = CACHE,
			this = self._NO_THIS,
		}
		for _, entity in pairs(CACHE.entities) do
			if entity.link_id then
				trace_assert(link_context[entity.link_id] == nil, "Entity already in context", link_context, entity)
				link_context[entity.link_id] = entity
			end
		end
		return setmetatable(link_context, { __index = self })
	end,

	set_this = function (self, entity)
		self.this = entity or LinkContext._NO_THIS
		return self
    end,

	get = function (self, link)
		return self:get_table(link)[link.field]
	end,

	get_table = function (self, link)
		local tbl = self[link.link_id]
        igi_helper.trace_assert(tbl, "Linker can't find tbl for link:", self)
		return tbl
	end,
}

Link = {
	new = function (link_id, field)
		local t = {
			link_id = link_id,
			field = field,
		}

		return setmetatable(t, {__index = Link})
    end,

	from_str = function (self, str)
		local link_id, field = str:match("%|([^%.]+)%.(.+)%|")
		trace_assert(link_id and field, "Link can't be resolved: " .. str)
		return Link.new(link_id, field)
	end,

	remap_this = function (self, mapping)
        if mapping and self.link_id == "this" then
            self.link_id = mapping
        end
		return self
	end
}

Macro       = {
	link_context = {},

    new = function(self, str)
		if type(str) ~= "string" then return end
        local level, is_auto, macro = string.match(str, "([^%$%@]*)(%@?)%$(.*)")
        if not macro then return end

        local t = {
            level = level,
            is_auto = is_auto ~= '',
            macro = macro,
			orig = str
        }

        return setmetatable(t, { __index = self })
    end,

	_without_links = function (self)
        return string.gsub(self.macro, "%b||", function(dep)
            local link = Link:from_str(dep)
			igi_helper.trace_assert(LinkContext.get(Macro.link_context, link) ~= nil, "Value for a link can't be found!", dep, Macro.link_context)
			return "igi_text_processor.Macro.link_context." .. link.link_id .. '.' .. link.field
		end)
	end,

    resolve = function(self, link_context)
		igi_helper.trace_dbg("Resolving macro", self.orig)

		Macro.link_context = link_context
		local out = eval(self:_without_links())

		trace_assert(out ~= nil, "Macro returned nil", self.orig)
		trace_assert(self.is_auto or type(out) ~= "userdata", "Macro returned userdata", self.orig)

		return out
    end,

	assert_level = function (self, level)
		local is_empty_auto = self.is_auto and self.level == ""
		igi_helper.trace_assert(self.level == level or is_empty_auto, "Macro is of wrong level", level, self.orig)
		return self
	end,

	link_iterator = function (self)
        return string.gmatch(self.macro, "%b||")
	end
}

-- Careful if you want to cache it: generate step invalidates link context
function get_link_context(CACHE, entity)
	return LinkContext:new(CACHE):set_this(entity)
end

function has_macro(str)
    return Macro:new(str) ~= nil
end

local function resolve_macros(tbl, level, link_context, transient_fields)
    for k, v in pairs(tbl) do
        if type(v) == 'table' then
            resolve_macros(v, level, link_context, transient_fields)
        elseif type(v) == 'string' then
            local macro = Macro:new(v)
			if (macro and macro.level == level and (not macro.is_auto)) then
				tbl[k] = _resolve_linked_macro(macro, level, link_context, transient_fields)
			end
        end
    end
end

local function collect_links(macro, link_context, buf, this_mapping)
	igi_helper.trace_assert(#buf < 10000, "Overflow while resolving macro (>10000 links). Circular dependency?", macro)

	for dep in macro:link_iterator() do
        local link = Link:from_str(dep):remap_this(this_mapping)

		buf[#buf + 1] = link
        local val = link_context:get(link)

        local macro = Macro:new(val)
        if macro then
            collect_links(macro, link_context, buf, link.link_id)
        end
    end
    return buf
end

local function resolve_all_links(links, level, link_context, transient_fields)
	for i = #links, 1, -1 do
        local link = links[i]
        local tbl = link_context:get_table(link)
        local before = tbl[link.field]
        igi_helper.trace_assert(before ~= nil, "Link is nil", link)

        local macro = Macro:new(before)
        if macro then
            macro:assert_level(level)
			local out = macro:resolve(link_context:set_this(tbl))

			if macro.is_auto then
				transient_fields[tbl] = transient_fields[tbl] or {}
				transient_fields[tbl][link.field] = before
			end

			tbl[link.field] = out
        end
	end
end

function _resolve_linked_macro(macro, level, link_context, transient_fields)
    local links = collect_links(macro, link_context, {})
    resolve_all_links(links, level, link_context, transient_fields)
    return macro:resolve(link_context)
end

local function reset_transient_fields(transient_fields)
	for tbl, fields in pairs(transient_fields) do
		for k, v in pairs(fields) do
			tbl[k] = v
		end
	end
end

function resolve_table_macros(tbl, level, link_context)
	local transient_fields = {}
	resolve_macros(tbl, level, link_context, transient_fields)
	reset_transient_fields(transient_fields)
end

function resolve_and_link_cache(CACHE, level)
    local link_context = igi_text_processor.get_link_context(CACHE)
	local transient_fields = {}

    for _, entity in pairs(CACHE.entities) do
        resolve_macros(entity, level, link_context:set_this(entity), transient_fields)
    end

	resolve_macros(CACHE, level, link_context, transient_fields)
	reset_transient_fields(transient_fields)
end

function eval_logic_macro(str, link_context)
    local macro = Macro:new(str)
	trace_assert(macro and macro.is_auto and macro.level == '', "Not a @$ macro", str)
	local transient_fields = {}
    local resolved = _resolve_linked_macro(macro, '', link_context, transient_fields)
	reset_transient_fields(transient_fields)
	return resolved
end

--------------- Testing --------------------------
--[[
igi_helper = {
  trace_assert = function(...) return assert(...) end,
  trace_dbg = print
}

loadstring = load

_G.igi_text_processor = _G

trace_assert  = igi_helper.trace_assert

CACHE = {
  entities = {
    {
    id = 1234,
    huh = '@$ |this.id|',
    br1 = "@$ |this.id|",
    br3 = "$ |this.br2|",
    br2 = "$ |this.br1|",
    brbrbr = "$ |this.br3|",
    str = "@$ |this.brbrbr|"
  }
  }
}

resolve_and_link_cache(CACHE, '')
print(eval_logic_macro(CACHE.entities[1].str, get_link_context(CACHE, CACHE.entities[1])))
print(CACHE.entities[1].br1)
]]