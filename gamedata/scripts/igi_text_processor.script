local trace_dbg = igi_helper.trace_dbg
local trace_assert  = igi_helper.trace_assert
local convert_type = igi_utils.convert_type

local function str_to_link(str)
	local link = try_str_to_link(str)
	return trace_assert(link, "Link can't be resolved: " .. str)
end

local function link_iterator(str)
	return str:gmatch("%b[]")
end

local function macro_iterator(str)
	return str:gmatch("%b&&")
end

local function has_link(str)
	return link_iterator(str)()
end

local function has_macro(str)
	return macro_iterator(str)()
end

local function resolve_links_in_str(str, link_context)
	local has_changes = false
	for dep in link_iterator(str) do
		local link = str_to_link(dep)
		local resolved = link:resolve(link_context)
		if resolved and not has_macro(resolved) then
			str = convert_type(str:gsub(igi_utils.escape_pattern(dep), resolved))
			has_changes = true
		end
	end
	return str, has_changes
end

local function resolve_free_dependencies(link_context, tbl)
	-- trace_dbg("resolve before ", tbl)
	local has_changes = false
	for k, v in pairs(tbl) do
		if type(v) == "table" then
			if resolve_free_dependencies(link_context, v) then
				has_changes = true
			end
		elseif type(v) == "string" then
			local str, changes = resolve_links_in_str(v, link_context)
			if changes then
				tbl[k] = str
				has_changes = true
			end
		end
	end
	-- trace_dbg("resolve after ", tbl, has_changes)
	return has_changes
end

local function try_str_to_macro(str)
	local macro = string.match(str, "%&(.-)%&")
	return macro and igi_macros.Macro.new(macro)
end

local function str_to_macro(str)
	local macro = try_str_to_macro(str)
	return trace_assert(macro, "Macro can't be resolved: " .. str)
end

local function resolve_in_str(str)
	local has_changed = false
	local changes = true
	while changes do
		changes = false
		for macro_str in macro_iterator(str) do
			if not has_link(macro_str) then
				local macro = str_to_macro(macro_str)
				trace_dbg("resolve macro", macro_str, macro)
				local resolved = macro:resolve()
				trace_dbg("resolved", igi_utils.escape_pattern(macro_str), resolved)
				str = str:gsub(igi_utils.escape_pattern(macro_str), resolved)
				changes = true
				has_changed = true
			end
		end
	end

	return str, has_changed
end

local function inner_resolve_and_link_table(tbl, link_context)
	local made_changes = false

	local has_changed = true
	while has_changed do
		has_changed = resolve_free_dependencies(link_context, tbl)
		has_changed = resolve_macros(tbl) or has_changed
		if has_changed then
			made_changes = true
		end
	end
	return made_changes
end

function resolve_macros_and_link_variables(CACHE)
	local link_context = igi_linker.LinkContext:new(CACHE)
	local has_changed = true
	while has_changed do
		has_changed = false
		for _, entity in pairs(CACHE.entities) do
			link_context:set_this(entity)
			has_changed = inner_resolve_and_link_table(entity, link_context) or has_changed
		end
	end
end

function resolve_and_link_cache(CACHE)
	return inner_resolve_and_link_table(CACHE, igi_linker.LinkContext:new(CACHE))
end

function try_str_to_link(str)
	trace_assert(not has_macro(str), "Macro found in link! That's not allowed.", str)
	local link_id, sep, field = str:match("%[([^%.]+)([%.%:])(.+)%]")

	if not (link_id and field) then
		return nil
	end

	return igi_linker.Link.new(link_id, field)
end

function link_entity(str, entity)
	for dep in link_iterator(str) do
		local link = str_to_link(dep)
		if link:is_pointed_to(entity) then
			local val = link:resolve_field(entity)
			if val ~= nil then
				str = str:gsub(igi_utils.escape_pattern(dep), val)
			end
		end
	end
	return convert_type(str)
end

function has_no_outer_links(tbl, entity)
	for k,v in pairs(tbl) do
		if type(v) == 'string' then
			for str in link_iterator(v) do
				if not str_to_link(str):points_to_self() then
					return false
				end
			end
		elseif type(v) == 'table' and not has_no_outer_links(v, entity) then
			return false
		end
	end
	return true
end

function resolve_macros(tbl)
	local has_changed = false
	for k,v in pairs(tbl) do
		if type(v) == 'table' then
			has_changed = resolve_macros(v) or has_changed
		elseif type(v) == 'string' then
			local str, changes = resolve_in_str(v)
			if changes then
				tbl[k] = convert_type(str)
				has_changed = true
			end

		end
	end
	return has_changed
end
