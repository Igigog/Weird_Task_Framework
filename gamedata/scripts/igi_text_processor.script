local trace_assert  = igi_helper.trace_assert

LinkContext  = {
	_link_prefix = "__igi__link_",
	_NO_THIS = {},

	new = function(self, CACHE)
		local link_context = {
			CACHE = CACHE,
			this = self._NO_THIS
		}
		for _, entity in pairs(CACHE.entities) do
			if entity.link_id then
				trace_assert(link_context[entity.link_id] == nil, "Entity already in context", link_context, entity)
				link_context[entity.link_id] = entity
			end
		end
		return setmetatable(link_context, { __index = self })
	end,

	set_this = function(self, entity)
		self.this = entity or self._NO_THIS
	end,

	get = function(self, key)
		return self[key]
	end,

	to_env = function (self)
		local env = {}
		for k, v in pairs(self) do
			env[LinkContext._link_prefix .. k] = v
		end
		return env
	end
}

Link = {
	new = function (link_id, field)
		local t = {
			link_id = link_id,
			field = field,
		}

		return setmetatable(t, {__index = Link})
	end,

    resolve = function(self, link_context)
		local entity = link_context:get(self.link_id)
		trace_assert(entity, "Linker can't find entity for link:", self)
		return self:resolve_field(entity)
	end,

	resolve_field = function(self, entity)
		return entity[self.field]
    end,

	as_variable = function (self)
		return LinkContext._link_prefix .. self.link_id .. "." .. self.field
	end
}

local fCache = {}
local function eval(v, env)
	local f = fCache[v]
	if f == nil then
		f = loadstring("return " .. v)
		fCache[v] = f
	end
	assert(f, "Function cannot be compiled: " .. (v or nil))

	setfenv(f, setmetatable(env or {}, {__index = _G}))
	return f()
end

-- Careful if you want to cache it: generate step invalidates link context
function get_link_context(CACHE, entity)
	local link_context = LinkContext:new(CACHE)
	link_context:set_this(entity)
	return link_context
end

function escape_pattern(text)
    return text:gsub("([^%w])", "%%%1")
end

local function str_to_link(str)
	local link_id, field = str:match("%|([^%.]+)%.(.+)%|")
	trace_assert(link_id and field, "Link can't be resolved: " .. str)
	return Link.new(link_id, field)
end

local function link_iterator(str)
	return str:gmatch("%b||")
end

local function str_to_macro(str)
	return string.match(str, "([^%$]*)%$(.*)")
end

function has_macro(str)
	return str_to_macro(str) ~= nil
end

local function resolve_macro(macro, link_context)
	return eval(macro, link_context:to_env())
end

local function resolve_links_in_str(str, link_context)
	for dep in link_iterator(str) do
		local link = str_to_link(dep)
		local resolved = link:resolve(link_context)
		if (resolved == nil) or (type(resolved) == "string" and str_to_macro(resolved)) then
			return
		end
		str = str:gsub(escape_pattern(dep), link:as_variable())
	end
	return str
end

local function resolve_in_str(str, level, link_context)
	local macro_level, macro = str_to_macro(str)
	if macro and macro_level == level then
		local without_links = resolve_links_in_str(macro, link_context)
		if without_links then
			igi_helper.trace_dbg("Resolving macro " .. macro)
			return resolve_macro(without_links, link_context)
		end
	end

	return str
end

local function resolve_macros(tbl, level, link_context)
	local has_changed = false
	for k,v in pairs(tbl) do
		if type(v) == 'table' then
			has_changed = resolve_macros(v, level, link_context) or has_changed
		elseif type(v) == 'string' then
			local out = resolve_in_str(v, level, link_context)
			if out ~= v then
				trace_assert(out ~= nil, "Macro returned nil", v)
				tbl[k] = out
				has_changed = true
			end

		end
	end
	return has_changed
end

local function inner_resolve_and_link_table(tbl, link_context, level)
	local made_changes = false
	while resolve_macros(tbl, level, link_context) do
		made_changes = true
	end
	return made_changes
end

local function resolve_macros_and_link_variables(CACHE, link_context, level)
	local has_changed = true
	while has_changed do
		has_changed = false
		for _, entity in pairs(CACHE.entities) do
			link_context:set_this(entity)
			has_changed = inner_resolve_and_link_table(entity, link_context, level) or has_changed
		end
	end
end

function resolve_and_link_cache(CACHE, level)
	local link_context = igi_text_processor.get_link_context(CACHE)
	resolve_macros_and_link_variables(CACHE, link_context, level)
	inner_resolve_and_link_table(CACHE, link_context, level)
end

function eval_logic_macro(str, link_context)
	local resolved = resolve_in_str(str, "@", link_context)
	trace_assert(resolved ~= str, "@$ macro was not resolved")
	return resolved
end
