TARGET_NAME = "assault"
PATTERN = "basic"

local WorldState = igi_world_state.WorldState
local trace_assert = igi_helper.trace_assert
local TASK_STATUSES = igi_subtask.TASK_STATUSES


local function is_legit_squad(squad)
	local section = squad and squad:section_name()
	return squad and (not section:find("tushkano")) and (not section:find("rat"))
end

local function is_squad_at_smart(se_squad, smart_id)

	local scripted_target = se_squad:get_script_target()
	if scripted_target then
		return scripted_target == smart_id
	end

	if se_squad.current_target_id ~= smart_id then
		return false
	end

	if se_squad.current_action ~= 1 then
		return false
	end

	if not is_legit_squad(se_squad) then
		return false
	end

	return true
end

function is_completed(obj_data)
	trace_assert(SIMBOARD.smarts[obj_data.id], "assault but not smart")

	local cleared = true
	for _, sq_id in pairs(obj_data.squads) do
		local squad = WorldState.objects[sq_id]
		if squad then
			cleared = false
			if not (squad.first_update) then break end
			squad.stay_time = game.get_game_time()
			squad.force_online = true
		end
	end

	return cleared
end

local function add_target_squads(entity)
	entity.squads = {}
	local smart = SIMBOARD.smarts[entity.id]
	for sq_id in pairs(smart.squads) do
		local se_squad = WorldState.objects[sq_id]
		local actor_faction = character_community(db.actor)
		local sq_faction = se_squad:get_squad_community()
		if is_squad_at_smart(se_squad, entity.id) and
				game_relations.is_factions_enemies(actor_faction, sq_faction) then
			table.insert(entity.squads, se_squad.id)
		end
	end
end

local function redirect_to_smart(entity)
	local smart_id = WorldState.objects[entity.id].current_target_id
	entity.where = smart_id
	igi_helper.trace_dbg("smart id", smart_id)
	local smart_entity = {
		target = "assault",
		entity_type = "location",
		status = igi_subtask.TASK_STATUSES.RUNNING,
		order = entity.order or 1,
		_state = igi_entities.ENTITY_STATES.INITIALISED,
	}
	igi_entities.bind_to_se_obj(smart_entity, smart_id)

	add_target_squads(smart_entity)
	return smart_entity
end

function setup_squad(entity)
	entity.target = nil
	local new_entities = igi_target_basic.setup_squad(entity)
	if not new_entities then return end

	if not entity.to_create then
		local new_smarts = {}
		igi_helper.trace_dbg("ASSAULT: redirect to smart "..tostring(entity.link_id), entity)
		new_smarts[#new_smarts+1] = redirect_to_smart(entity)
		for _, new_entity in pairs(new_entities) do
			new_smarts[#new_smarts+1] = redirect_to_smart(new_entity)
		end

		for _, v in pairs(new_smarts) do
			new_entities[#new_entities+1] = v
		end
	end
	return new_entities
end

function entity_on_after_target_creation(entity)
	add_target_squads(entity)
end

local function mark_distant_squads(entity)
	local smart_position = WorldState.objects[entity.id].position

	for _, sq_id in pairs(entity.squads) do
		local se_squad = WorldState.objects[sq_id]
		if se_squad then
			local is_marked = level.map_has_object_spot(se_squad.id,"red_location") == 1
			local is_nearby = smart_position:distance_to_sqr(se_squad.position) < 2500

			if not (is_nearby or is_marked) then
				level.map_add_object_spot(se_squad.id, "red_location", "st_ui_pda_task_unknown_enemy")
			elseif is_nearby and is_marked then
				level.map_remove_object_spot(se_squad.id, "red_location")
			end
		end
	end
end

function get_status(entity)
	mark_distant_squads(entity)
	if is_completed(entity) then return TASK_STATUSES.COMPLETED end
	return TASK_STATUSES.RUNNING
end

function test(entity)
	local assert_test = igi_tests.assert_test
	entity._test_stage = (entity._test_stage or 0) + 1

	if entity._test_stage == 1 then
		local se_obj = igi_entities.get_binded_object(entity)
		assert_test(se_obj, "Entity does not exist")
		igi_tests.travel_to_se_obj(se_obj)
	elseif entity._test_stage == 2 then
		for _, sq_id in pairs(entity.squads) do
			local se_squad = WorldState.objects[sq_id]
			if se_squad then
				for se_npc in se_squad:squad_members() do
					local npc = igi_helper.level_object(se_npc.id)
					npc:kill(db.actor)
				end
			end
		end
	elseif entity._test_stage == 4 then
		assert_test(entity.status == "COMPLETED", "Quest did not complete after killing")
		return true
	end
end
igi_tests.register_subtask_test("test_target_assault", {
	entities = {
		{
			entity_type = "location",
			search_for = "smart",
			where = "0,0",
			target = "assault"
		},

		{
			entity_type = "squad",
			section_name = "army_sim_squad_novice",
			to_create = true,
			where = "[location_1_1.id]"
		}
	}
})
