local trace_assert = igi_helper.trace_assert
local TASK_STATUSES = igi_subtask.TASK_STATUSES

local function is_legit_squad(squad)
	local section = squad and squad:section_name()
	return squad and (not section:find("tushkano")) and (not section:find("rat"))
end

local function is_squad_at_smart(se_squad, smart_id)
	local scripted_target = se_squad:get_script_target()
	if scripted_target then
		return scripted_target == smart_id
	end

	if se_squad.current_target_id ~= smart_id then
		return false
	end

	if se_squad.current_action ~= 1 then
		return false
	end

	if not is_legit_squad(se_squad) then
		return false
	end

	return true
end

local function is_completed(obj_data)
	trace_assert(SIMBOARD.smarts[obj_data.id], "assault but not smart")

	local cleared = true
	for _, sq_id in pairs(obj_data.squads) do
		local squad = alife_object(sq_id)
		if squad then
			cleared = false
			if not (squad.first_update) then break end
			squad.stay_time = game.get_game_time()
			squad.force_online = true
		end
	end

	return cleared
end

local function add_target_squads(entity)
	entity.squads = {}
	local smart = SIMBOARD.smarts[entity.id]
	for sq_id in pairs(smart.squads) do
		local se_squad = alife_object(sq_id)
		local actor_faction = character_community(db.actor)
		local sq_faction = se_squad:get_squad_community()
		if is_squad_at_smart(se_squad, entity.id) and
			game_relations.is_factions_enemies(actor_faction, sq_faction) then
			table.insert(entity.squads, se_squad.id)
		end
	end
end

Assault = {}
function Assault.entity_on_first_run(entity)
	trace_assert(type(entity.id) == "number", "Assault: entity.id is not a number", entity)
	trace_assert(alife_object(entity.id), "Assault: no server object for this id", entity)
	trace_assert(SIMBOARD.smarts[entity.id], "Assault: entity.id is not a smart", entity)
	add_target_squads(entity)
end

local function mark_distant_squads(entity)
	local smart_position = alife_object(entity.id).position

	for _, sq_id in pairs(entity.squads) do
		local se_squad = alife_object(sq_id)
		if se_squad then
			local is_marked = level.map_has_object_spot(se_squad.id, "red_location") == 1
			local is_nearby = smart_position:distance_to_sqr(se_squad.position) < 2500

			if not (is_nearby or is_marked) then
				level.map_add_object_spot(se_squad.id, "red_location", "st_ui_pda_task_unknown_enemy")
			elseif is_nearby and is_marked then
				level.map_remove_object_spot(se_squad.id, "red_location")
			end
		end
	end
end

function Assault.status(entity)
	mark_distant_squads(entity)
	if is_completed(entity) then return TASK_STATUSES.COMPLETED end
	return TASK_STATUSES.RUNNING
end

function Assault.quest_target(entity)
	return entity.id
end

function Assault.complexity(entity)
	return 5000
end

function Assault.test(entity)
	local assert_test = igi_tests.assert_test
	entity._test_stage = (entity._test_stage or 0) + 1

	if entity._test_stage == 1 then
		local se_obj = alife_object(entity.id)
		assert_test(se_obj, "Entity does not exist")
		if igi_mcm.get_options_value("fast_tests") then
			for _, sq_id in pairs(entity.squads) do
				local se_squad = alife_object(sq_id)
				if se_squad then
					igi_tests.teleport_to_player(se_squad)
				end
			end
		else
			igi_tests.travel_to_se_obj(se_obj)
		end
	elseif entity._test_stage == 2 then
		for _, sq_id in pairs(entity.squads) do
			local se_squad = alife_object(sq_id)
			if se_squad then
				for se_npc in se_squad:squad_members() do
					local npc = get_object_by_id(se_npc.id)
					npc:kill(db.actor)
				end
				get_object_by_id(se_squad:commander_id()):kill(db.actor)
			end
		end
	elseif entity._test_stage == 4 then
		assert_test(entity.status == "COMPLETED", "Quest did not complete after killing")
		return true
	end
end
