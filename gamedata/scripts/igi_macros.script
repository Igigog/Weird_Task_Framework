local trace_assert = igi_helper.trace_assert
local trace_dbg = igi_helper.trace_dbg
local WorldState = igi_world_state.WorldState
local Set = igi_utils.Set

current_tg_faction = nil
function set_task_giver(tg_id)
	current_tg_faction = igi_helper.get_community_by_id(tg_id)
end

Macro = {
    new = function(str)
		local f = assert(igi_helper.eval(str))
    	trace_assert(f, "Macro fucked up and catched fire", str)
    	setfenv(f, Macro)
		local t = {f}
		return setmetatable(t, {__index = Macro})
	end,

	resolve = function(self)
		local v = self[1]()
		trace_dbg("resolved", tostring(v))
		return v
	end
}

setmetatable(Macro, {__index = _G})

function Macro.ScaleToPlayer(a, b)
	-- will return integer from a to b (or from 1 to a) based
	-- on player rank
	local endgame_rank = 8000	-- TODO: move to settings
	local rank = db.actor:character_rank()

	local function s(section, total_sections)
		if section == 1 then return 0 end
		local koeff = (section/total_sections)^2
		return endgame_rank*koeff
	end

	local total_sections = b and (b-a+1) or a
	local offset = b and a-1 or 0
	for section=total_sections,1,-1 do
		if rank > s(section, total_sections) then
			return section + offset
		end
	end
	return b and a or 1
end

function Macro.Random(b, a)
	return igi_random.rand(b, a)
end

function Macro.TableValueRandom(tbl_name)
	local tbl = igi_db.ini_tables[tbl_name]:as_table()
	local elem = igi_utils.random_table_element(tbl)
	if type(elem) == "table" then
		return table.concat(igi_utils.random_table_element(tbl), ",")
	end
	return elem
end

function Macro.TableValueByKey(tbl_name, key)
	trace_assert(tbl_name and key)
	local tbl = igi_db.ini_tables[tbl_name]
	return tbl[key]
end

function Macro.ChooseOne(...)
	return igi_utils.random_table_element({...})
end

local constant_functions = {
	actor_level = level.name,
	player_level = level.name,
}
function Macro.Constant(key)
	return constant_functions[key]()
end

local function get_faction(keyword)
	if keyword == "actor" then
		return db.actor:character_community()
	elseif keyword == 'taskgiver' then
		return current_tg_faction
	else
		return keyword
	end
end

local evaluate, tokenize
function Macro.Faction(args_str)
	-- args checker needed
	local tokens = tokenize(args_str)
	local factions = evaluate(tokens, 1, #tokens)
	if type(factions) == 'table' then
		local _, faction = igi_utils.random_table_element(factions)
		return faction or 'stalker'
	else
		return get_faction(factions)
	end
end

----------------BOOLEAN----------------------------------

local blacklist = {
	monolith = true,
	renegade = true,
	greh = true,
	isg = true,
}
local function get_viable_factions()
	local factions = {}
	for _, faction in pairs(game_relations.factions_table) do
		if not blacklist[faction] then
			factions[faction] = true
		end
	end
	return factions
end

local function convert_to_faction_set(faction)
	trace_dbg("convert to faction", faction)
	if type(faction) == 'string' then
		return {[get_faction(faction)] = true}
	end
	return faction
end

local function get_of_factions(key, faction)
	local is_in = key == "enemy" and game_relations.is_factions_enemies or game_relations.is_factions_friends
	local tbl = {}
	for k_faction in pairs(get_viable_factions()) do
		if is_in(faction, k_faction) then
			tbl[k_faction] = true
		end
	end
	return tbl
end

local function and_func(left, right)
	right = convert_to_faction_set(right)
	left = convert_to_faction_set(left)
    return Set.intersection(left, right)
end

local function or_func(left, right)
	right = convert_to_faction_set(right)
	left = convert_to_faction_set(left)
    return Set.union(left, right)
end

local function not_func(left, right)
	right = convert_to_faction_set(right)
	return Set.difference(get_viable_factions(), right)
end

local function of_func(left, right)
	right = convert_to_faction_set(right)

	local newset = {}
	for faction in pairs(right) do
		for of_faction in pairs(get_of_factions(left, faction)) do
			newset[of_faction] = true
		end
	end
    return newset
end

function tokenize(str)
    local tbl = {}
    str = str:gsub("%(", "%( "):gsub('%)', ' %)')
    for substr in str:gmatch("[^%s]+") do
        tbl[#tbl+1] = substr
    end
    return tbl
end

local function evaluate_no_par(tokens, tstart, tend)
    if tstart > tend then return nil end
    if tstart == tend then return tokens[tstart] end
    local last_and, last_or, last_not, last_of
    for i=tend,tstart,-1 do
        local token = tokens[i]
        if token == "and" then
            last_and = i
        elseif token == "or" then
            last_or = i
        elseif token == "not" then
            last_not = i
        elseif token == "of" then
            last_of = i
        end
    end
    if last_and then
		return and_func(evaluate_no_par(tokens, tstart, last_and-1), evaluate_no_par(tokens, last_and+1, tend))
    elseif last_or then
		return or_func(evaluate_no_par(tokens, tstart, last_or-1), evaluate_no_par(tokens, last_or+1, tend))
    elseif last_not then
		return not_func(evaluate_no_par(tokens, tstart, last_not-1),evaluate_no_par(tokens, last_not+1, tend))
    elseif last_of then
		return of_func(evaluate_no_par(tokens, tstart, last_of-1),evaluate_no_par(tokens, last_of+1, tend))
    end
end

function evaluate(tokens, tstart, tend)
    if tstart > tend then return nil end
    if tstart == tend then return tokens[tstart] end

    local new_tokens = {}
    local par_count = 0
    local par_start
    for i=tstart,tend do
        local token = tokens[i]
        if token == '(' then
            if par_count == 0 then
                par_start = i
            end
            par_count = par_count + 1

        elseif token == ')' then
            par_count = par_count - 1
            if par_count == 0 then
                new_tokens[#new_tokens + 1] = evaluate(tokens, par_start+1, i-1)
            end
        elseif par_count == 0 then
            new_tokens[#new_tokens + 1] = token
        end
    end
    return evaluate_no_par(new_tokens, 1, #new_tokens)
end
