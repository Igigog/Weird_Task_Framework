local trace_dbg = igi_helper.trace_dbg
local trace_assert = igi_helper.trace_assert
local TASK_STATUSES = igi_subtask.TASK_STATUSES
local set = igi_utils.Set.from_list

DEFAULT_REWARDER = {
	has_material_rewards = function (self, CACHE)
		local _, high = self:guess_rewards(CACHE)
		return high.money > 0
	end,

	split_to_rewards = function (self, points)
		local money = Money.points_to_value(points * 0.8)
		local goodwill = Goodwill.points_to_value(points * 0.2)
		return {
			money = math.floor(money * igi_mcm.get_options_value("money_reward_coeff")),
			goodwill = math.ceil(goodwill * igi_mcm.get_options_value("goodwill_reward_coeff")),
		}
	end,

	guess_rewards = function (self, CACHE)
		local low, high = get_reward_bounds(CACHE.entities, TASK_STATUSES)
		trace_assert(low ~= nil, "Low reward bound is nil")
		if high == nil then
			high = low
		end
		return self:split_to_rewards(low), self:split_to_rewards(high)
	end
}

_STATIC_REWARDER = {
	_money = 0,
	_goodwill = 0,

	has_material_rewards = function (self, CACHE)
		return self._money > 0
	end,

	split_to_rewards = function (self, points)
		-- Ignores points, manually adjust to economy
		local multi = game_difficulties.get_eco_factor("rewards") or 1
		return {
			money = math.floor(self._money * multi * igi_mcm.get_options_value("money_reward_coeff")),
			goodwill = math.ceil(self._goodwill * multi * igi_mcm.get_options_value("goodwill_reward_coeff"))
		}
	end,

	guess_rewards = function(self, CACHE)
		local s = self:split_to_rewards(0)
		return s, s
	end
}
function STATIC_REWARDER(money, goodwill)
	return setmetatable({
		_money = money,
		_goodwill = goodwill
	}, {__index = _STATIC_REWARDER})
end

local rewarder_cache = {}
local function get_rewarder(CACHE)
	if not CACHE.rewarder then
		return DEFAULT_REWARDER
	end
	local rw = rewarder_cache[CACHE.rewarder]
	if not rw then
		local new_rw = igi_helper.eval(CACHE.rewarder)()
		rewarder_cache[CACHE.rewarder] = new_rw
		return new_rw
	end
	return rw
end

function has_material_rewards(CACHE)
	return get_rewarder(CACHE):has_material_rewards(CACHE)
end

function guess_rewards(CACHE)
	return get_rewarder(CACHE):guess_rewards(CACHE)
end

function collect_and_give_rewards(CACHE)
	local total = collect_rewards(CACHE.entities)
	local rewards = get_rewarder(CACHE):split_to_rewards(total)

	trace_dbg("rewards", CACHE.rewarder or "DEFAULT_REWARDER", rewards)
	igi_callbacks.invoke_callbacks("on_before_rewarding", CACHE, rewards)
	local faction = igi_helper.get_community_by_id(CACHE.task_giver_id)
	give_rewards(rewards, faction)
end

function collect_rewards(entities)
	local low, high = get_reward_bounds(entities, set { TASK_STATUSES.COMPLETED })
	if (low ~= high) then
		igi_helper.trace_error("Rewards did not converge, low: " .. low .. " high: " .. high)
	end
	return low
end

function get_reward_bounds(entities, allowed_statuses)
	local lower_bound = 0
	local higher_bound = 0
	for _, entity in pairs(entities) do
		if entity.target and allowed_statuses[entity.status or TASK_STATUSES.RUNNING] then
			local target_tbl = igi_taskdata.get_target_table(entity.target)
			local low, high = target_tbl.get_complexity(entity)
			if high == nil then high = low end
			lower_bound = lower_bound + low
			higher_bound = higher_bound + high
		end
	end
	local multi =  game_difficulties.get_eco_factor("rewards") or 1
	return lower_bound * multi, higher_bound * multi
end

function give_rewards(rewards, faction)
	if (rewards.money) then
		Money.give(rewards.money)
	end

	if (rewards.goodwill) then
		Goodwill.give(rewards.goodwill, faction)
	end
end

Goodwill = {
	give = function (amount, faction)
		if amount == 0 then return end
		xr_effects.inc_faction_goodwill_to_actor(db.actor, nil, { faction, amount, true })
	end,

	points_to_value = function(points)
		return points / 50
	end
}

Money = {
	give = function (amount)
		if amount ~= 0 then
			dialogs.relocate_money(db.actor, amount, "in")
		end
	end,

	points_to_value = function (points)
		return points
	end
}

Item = {
	give = function (self)
		for section, quantity in pairs(self) do
			for _=1,quantity do
				alife_create_item(section, db.actor)
			end
			news_manager.relocate_item(db.actor, "in", section, quantity)
		end
	end,
}
