local function notnil(v)
	if (v == nil) then
		igi_generic_task.NIL_ERROR = true
	end
	igi_helper.trace_assert(v ~= nil)
	return v
end

local trace_dbg = notnil(igi_helper.trace_dbg)
local trace_error = notnil(igi_helper.trace_error)
local pcall = notnil(igi_helper.pcall)

local Igi = {
	is_subset = notnil(igi_utils.Set.is_subset),
	get_task_text = notnil(igi_description.get_task_text),
	get_all_quests = notnil(igi_taskdata.get_all_quests),
	get_cache = notnil(igi_generic_task.get_cache),
	get_setup = notnil(igi_generic_task.get_setup_cache),
	get_task_cache = notnil(igi_taskdata.get_task_cache),
	TASK_STATUSES = notnil(igi_subtask.TASK_STATUSES),
	setup_quest = notnil(igi_generic_task.setup_quest),
	initialise_CACHE = notnil(igi_generic_task.initialise_CACHE),
	try_prepare_quest = notnil(igi_generic_task.try_prepare_quest),
	quest_status = notnil(igi_generic_task.quest_status),
	quest_text = notnil(igi_generic_task.quest_text),
	quest_target = notnil(igi_generic_task.quest_target),
	finish_quest = notnil(igi_generic_task.finish_quest),
	first_finished_igi_task = notnil(igi_generic_task.first_finished_igi_task),
}

function on_game_start()
	RegisterScriptCallback("load_state", load_state)
	RegisterScriptCallback("save_state", save_state)
end

NPC_TAGS = {}
function get_npc_tags()
	if next(NPC_TAGS) then return NPC_TAGS end
	local section = igi_helper.db_ini:collect_section("npc_tags")
	for k, v in pairs(section) do
		section[k] = igi_utils.Set.from_list(parse_names(v))
	end
	NPC_TAGS = section
	return section
end

function pcall(f, ...)
	if type(f) ~= "function" then
		callstack()
		return false, "Not a function"
	end
	local xf = coroutine.create(f)
	local ok, res = coroutine.resume(xf, ...)
	if not ok then
		return ok, debug.traceback(xf, res .. "\\n")
	end
	return ok, res
end

REPEAT_TIMEOUT = 16200
FINISHED_QUESTS = {}

NPC_QUESTS = {}
function get_all_quests_for_npc(npc)
	local npc_name = npc:section() ~= "m_trader" and npc:section() or npc:name()
	if not NPC_QUESTS[npc_name] then
		local quest_list = {}
		local ok, all_quests = pcall(Igi.get_all_quests)
		for k, quests in pairs(ok and all_quests or {}) do
			for quest_name, quest_table in pairs(quests) do
				if npc_has_quest(npc_name, quest_table) then
					quest_list[#quest_list+1] = {k, quest_name}
				end
			end
		end
		NPC_QUESTS[npc_name] = quest_list
	end
	trace_dbg("Npc quests: ", npc_name, NPC_QUESTS[npc_name])
	return NPC_QUESTS[npc_name]
end

function is_valid_quest(tg_id, task_data, task_id)
	if Igi.get_cache(task_id) then
		return false	-- currently active
	end

	local last_finish = FINISHED_QUESTS[task_id]
	local timeout = task_data.repeat_timeout or REPEAT_TIMEOUT
	if last_finish and game.get_game_time():diffSec(last_finish) <= timeout then
		return false		-- in timeout
	end
	FINISHED_QUESTS[task_id] = nil

	local ok, out = pcall(Igi.try_prepare_quest, task_id, task_data, tg_id)
	if not ok then
		on_task_crashed(out)
	end
	return ok and (out ~= nil)
end

function get_valid_quests_for_npc(npc)
	local tg_id = npc:id()
	local quest_list = {}
	for _, quest_id in pairs(get_all_quests_for_npc(npc)) do
		local task_id = quest_id[1] .. quest_id[2] .. tg_id
		local _ = pcall(igi_random.set_seed, task_id)
		local ok, task_data = pcall(Igi.get_task_cache, quest_id, task_id, tg_id)
		if not ok then
			igi_helper.trace_error("Task validation failed!", task_data)
		end
		if ok and is_valid_quest(npc:id(), task_data, task_id) then
			quest_list[#quest_list+1] = task_id
		end
	end
	return quest_list
end

old_generate_available_tasks = axr_task_manager.generate_available_tasks
function axr_task_manager.generate_available_tasks(npc,is_sim)
	old_generate_available_tasks(npc, is_sim)
	inject_tasks(npc)
end


function npc_has_quest(npc_name, quest)
	if not get_npc_tags()[npc_name] then return false end
	local npc_tags = get_npc_tags()[npc_name]
	for _, quest_tags in pairs(quest.quest_givers or {}) do
		if Igi.is_subset(quest_tags, npc_tags) then
			return true
		end
	end
	return false
end

function inject_tasks(npc)
	trace_dbg("Injecting tasks! Before: ", axr_task_manager.available_tasks[npc:id()])
	local available_tasks = axr_task_manager.available_tasks[npc:id()]
	for _, quest_id in pairs(get_valid_quests_for_npc(npc)) do
		available_tasks[#available_tasks+1] = quest_id
	end
	trace_dbg("Injecting tasks! After: ", axr_task_manager.available_tasks[npc:id()])
end

old_get_first_finished_task = axr_task_manager.get_first_finished_task
function axr_task_manager.get_first_finished_task(npc,is_sim)
	local task_id = old_get_first_finished_task(npc, is_sim)
	if not task_id then
		task_id = Igi.first_finished_igi_task(npc:id())
	end
	return task_id
end

old_drx_sl_text_mechanic_has_ordered_task_to_give = dialogs.drx_sl_text_mechanic_has_ordered_task_to_give
function dialogs.drx_sl_text_mechanic_has_ordered_task_to_give( a, b )
	local npc = dialogs.who_is_npc(a, b)
	local igi_tasks = get_valid_quests_for_npc(npc)

	-- randomly sets task_id to nil when vanilla task exists to avoid only giving igi tasks
	local vanilla_task_chance = axr_task_manager.drx_sl_get_mechanic_task(npc) and 1 or 0
	local task_id = igi_tasks[math.random(#igi_tasks + vanilla_task_chance)]

	if task_id then
		local CACHE = Igi.get_setup(task_id)
		dialogs.last_task_id = task_id
		local ok = pcall(Igi.setup_quest, task_id)
		if ok then
			local ok, text = pcall(Igi.get_task_text, CACHE.description_key, "job_descr", CACHE.task_giver_id)
			if ok then
				return text
			else
				on_task_crashed(text, task_id)
			end
		end
	end

	return old_drx_sl_text_mechanic_has_ordered_task_to_give(a, b)
end

IgiTask = {
	stage			= 0,
	title			= "TITLE_DOESNT_EXIST",
	descr			= "DESCR_DOESNT_EXIST",
	icon			= "ui_pda2_mtask_overlay",
	prior			= 2000,
	update_delay	= 1000,
	last_update_time = 0,
	condlist = {},
	status = "normal",
	spot = "secondary_task_location",
	dont_send_update_news = false,

	new = function (id)
		local task_table = Igi.get_setup(id)
		local t = {
			type			= "igi",
			id				= id,
			icon			= task_table.icon,
			storyline		= task_table.storyline,
			update_delay	= task_table.update_delay,
		}
		if task_table.storyline then
			t.spot = "storyline_task_location"
		end
		return setmetatable(t, IgiTask._mt)
	end,

	get_title = function (self)
		return self.title
	end,

	get_icon_name = function (self)
		return self.icon
	end,

	give_task             = function(self)
		local ok, err = pcall(function(id)
			Igi.initialise_CACHE(id)
			Igi.quest_status(id) -- run once to setup current target
			self.current_title = Igi.quest_text(id, "title")
			self.current_descr = Igi.quest_text(id, "descr")
			self.current_target = Igi.quest_target(id)
		end, self.id)
		if not ok then
			on_task_crashed(err)
			return
		end
		self.status = "selected"

		local t = CGameTask()
		t:set_id(self.id)
		---@diagnostic disable-next-line: undefined-field
		t:set_type(self.storyline and task.storyline or task.additional)
		t:set_title(self.current_title)
		t:set_description(self.current_descr)
		t:set_priority(self.prior)
		t:set_icon_name(self.icon)
		t:add_complete_func("task_manager.task_complete")
		t:add_fail_func("task_manager.task_fail")

		if self.current_target ~= nil then
			t:set_map_location(self.spot)
			t:set_map_object_id(self.current_target)
		end
		self.t = t
		db.actor:give_task(t, 0, false, 0)
	end,

	check_task = function (self)
		-- Timer for less pressure
		local tg = time_global()
		if (tg < self.last_update_time) then
			return
		end
		self.last_update_time = tg + self.update_delay

		self.t = self.t or db.actor:get_task(self.id,true)
		if (self.t == nil) then -- task is most likely in timeout
			return
		end

		local task_updated = false

		local ok, t_title = pcall(Igi.quest_text, self.id, "title")
		if not ok then
			on_task_crashed(t_title, self.id)
			return
		end
		if self.current_title ~= t_title then
			task_updated = true
			self.current_title = t_title
			self.t:set_title(t_title)
		end

		local ok, t_descr = pcall(Igi.quest_text, self.id, "descr")
		if not ok then
			on_task_crashed(t_descr, self.id)
			return
		end
		if self.current_descr ~= t_descr then
			task_updated = true
			self.current_descr = t_descr
			self.t:set_description(t_descr)
		end

		local ok, t_target = pcall(Igi.quest_target, self.id)
		if not ok then
			on_task_crashed(t_target, self.id)
			return
		end
		if (self.current_target ~= t_target) then
			task_updated = true
			if not t_target then
				self.t:remove_map_locations(false)
			else
				self.t:change_map_location(self.spot, t_target)
			end
			self.current_target = t_target
		end

		if task_updated and not self.dont_send_update_news then
			news_manager.send_task(db.actor, "updated", self.t)
		end

		-- status functor
		local ok, t = pcall(Igi.quest_status, self.id)
		if not ok then
			on_task_crashed(t, self.id)
			return
		end
		if t == "complete" or t == "fail" or t == "reversed" then
			self.last_check_task = t
		end
	end,

	deactivate_task = function (self, tsk)
		self.check_time = nil
		self.last_check_task = nil
		self.status = "normal"

		if tmrs_tasks then	-- xcvb's task timers
			tmrs_tasks.active_tasks[self.id] = nil
		end

		if self.last_check_task == "fail" then
			local ok, err = pcall(Igi.finish_quest, self.id)
			if not ok then
				on_task_crashed(err)
			end
			news_manager.send_task(db.actor, "fail", tsk)
		end
	end,

	save_state = function (self)
		--utils_data.debug_write(strformat("CGeneralTask:save_state %s BEFORE",self.id))
		if (self.t == nil) then
			if (self.repeat_timeout == nil or self.timeout == nil) then
				return
			end
			if (game.get_game_time():diffSec(self.timeout) > self.repeat_timeout) then
				return
			end
		end

		local t = dup_table(self)
		t.t = nil
		t.last_update_time = nil
		return t
	end,

	give_reward           = function(self)
		local ok, err = pcall(Igi.finish_quest, self.id)
		if not ok then
			on_task_crashed(err)
		end
		FINISHED_QUESTS[self.id] = game.get_game_time()
		if tmrs_tasks then -- xcvb's task timers
			tmrs_tasks.active_tasks[self.id] = nil
		end
	end,

	save = function () end,
	load = function () end,
}
IgiTask._mt = {__index = IgiTask}

function task_manager.save_state(m_data)
	m_data.task_info = {}
	m_data.task_objects = {}
	m_data.igi_task_objects = {}

	local tm = task_manager.get_task_manager()

	for k,v in pairs(tm.task_info) do
		if (v.type == "igi") then
			m_data.igi_task_objects[k] = v:save_state(m_data)
		else
			m_data.task_info[k] = true
			tm.task_info[k]:save_state(m_data)
		end
	end
end

function task_manager.load_state(m_data)
	local tm = task_manager.get_task_manager()

	for task_id in pairs(m_data.task_info or {}) do
		local obj = task_objects.CGeneralTask(task_id)
		if (obj:load_state(m_data) == true) then
			tm.task_info[task_id] = obj
		end
	end

	for task_id, tbl in pairs(m_data.igi_task_objects or {}) do
		tm.task_info[task_id] = setmetatable(tbl, IgiTask._mt)
	end

	m_data.task_info = nil
	m_data.igi_task_objects = nil
end

old_give_task = task_manager.CRandomTask.give_task
function task_manager.CRandomTask.give_task(self, task_id,task_giver_id)
	if Igi.get_setup(task_id) then
		local task = IgiTask.new(task_id)
		self.task_info[task_id] = task
		task:give_task()
	else
		old_give_task(self, task_id, task_giver_id)
	end
end

old_get_task_complete_text = axr_task_manager.get_task_complete_text
function axr_task_manager.get_task_complete_text(task_id)
	local CACHE = Igi.get_cache(task_id)
	if CACHE then
		local ok, text = pcall(Igi.get_task_text, CACHE.description_key, "finish", CACHE.task_giver_id)
		return ok and text or ""
	end

	return old_get_task_complete_text(task_id)
end

old_get_task_job_description = axr_task_manager.get_task_job_description
function axr_task_manager.get_task_job_description( task_id )
	local CACHE = Igi.get_cache(task_id) or Igi.get_setup(task_id)
	if CACHE then
		local ok, text = pcall(Igi.get_task_text, CACHE.description_key, "job_descr", CACHE.task_giver_id)
		return ok and text or ""
	end

	return old_get_task_job_description(task_id)
end

old_text_npc_has_task = dialogs.text_npc_has_task
function dialogs.text_npc_has_task(a,b)
	local npc = dialogs.who_is_npc(a, b)
	local task_id = axr_task_manager.available_tasks[npc:id()] and axr_task_manager.available_tasks[npc:id()][1]
	local CACHE = Igi.get_setup(task_id)

	if CACHE then
		local ok, text = pcall(function()
			Igi.setup_quest(task_id)
			return Igi.get_task_text(CACHE.description_key, "job_descr", CACHE.task_giver_id)
		end)
		return ok and text or "Uhh... Something went wrong. Sorry :) - Igi"
	end

	return old_text_npc_has_task(a, b)
end

function save_state(m_data)
	m_data.igi_finished_quests = FINISHED_QUESTS
end

function load_state(m_data)
	FINISHED_QUESTS = m_data.igi_finished_quests or FINISHED_QUESTS
end

crash_count = 0
function on_task_crashed(err, task_id)
	if task_id then
		task_manager.get_task_manager():set_task_failed(task_id)
	end
	trace_error("Task crashed: ", err, callstack(false, true))
	crash_count = crash_count + 1

	if (crash_count == 1 and igi_mcm.get_options_value("wtf_crash_message")) then
		CreateTimeEvent("igi_send_crash_msg", 0, 0, function()
			news_manager.send_tip(db.actor,
				"[" ..
				tostring(crash_count) ..
				"x] " ..
				"Weird Tasks Framework crashed! Sorry :(. I've taken care of it, you can continue your playthrough.", nil,
				nil, 30000)
			crash_count = 0
			flush()
			return true
		end)
	end
end
