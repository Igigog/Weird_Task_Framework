local trace_assert = igi_helper.trace_assert
local trace_dbg = igi_helper.trace_dbg

function on_game_start()
    RegisterScriptCallback("save_state", save_state)
    RegisterScriptCallback("load_state", load_state)
    RegisterScriptCallback("actor_on_first_update", actor_on_first_update)
end

RESULT = {
    SUCCESS = "SUCCESS",
    FAIL = "FAIL",
    DISABLED = "DISABLED"
}

STATE = {
    current_tests_name = nil,
    current_test = nil,
    last_test = nil,
    current_test_state = nil,
    tests_history = nil,
}

TESTS = {}
SUBTASK_TESTS = {}

function save_state(m_data)
    m_data.igi_tests_state = STATE
end

function load_state(m_data)
    STATE = m_data.igi_tests_state or STATE
end

function actor_on_first_update()
    if not STATE.current_tests_name then return end
    if STATE.current_tests_name == "normal" then
        CreateTimeEvent("igi_tests", "tests", 2, normal_tests_worker)
        CreateTimeEvent("igi_tests", "current_test", 2, continue_test_worker)
    else
        CreateTimeEvent("igi_tests", "tests", 2, integration_tests_worker)
        CreateTimeEvent("igi_tests", "current_test", 2, continue_test_worker)
    end
end

function prepare_mock_quest(cache, id)
    local tg_id = get_story_se_object("bar_visitors_barman_stalker_trader").id
    return igi_generic_task.try_prepare_quest(id, cache, tg_id)
end

function register_subtask_test(id, cache)
    trace_assert(not SUBTASK_TESTS[id], "Subtask test already registered: "..id)
    cache.update_delay = 0
    igi_taskdata.finalize_task_cache(cache, id)
    SUBTASK_TESTS[id] = cache
end

function register_test(id, f, state)
    TESTS[id] = {f, state}
end

local flatenned_quests = {}
function flat_quests()
    if not next(flatenned_quests) then
        for prefix, quests in pairs(igi_taskdata.get_all_quests()) do
            for quest_name, cache in pairs(quests) do
                flatenned_quests[prefix..":"..quest_name] = cache
            end
        end
    end
    return flatenned_quests
end

local function report_tests_history()
    local report = {}
    local count_successful = 0
    local count_disabled = 0
    for test_case, result in pairs(STATE.tests_history) do
        if result == RESULT.SUCCESS then
            count_successful = count_successful + 1
        elseif result == RESULT.DISABLED then
            count_disabled = count_disabled + 1
        else
            report[#report+1] = test_case..": %c[d_red]fail%c[0,255,255,255]"
        end
    end

    news_manager.send_tip(db.actor,
        "Tests finished. Report:\\n"
        .."["..count_disabled.."]: %c[0,155,155,155]disabled%c[0,255,255,255]\\n \\n"
        .."["..count_successful.."]: %c[d_green]success%c[0,255,255,255]\\n \\n"
        ..table.concat(report, "\\n \\n"), nil, nil, 30000)
    trace_dbg("Test report:", STATE.tests_history)
end

function start_integration_tests(test_type)
    xrs_debug_tools.debug_invis = true
    STATE.current_tests_name = test_type
    STATE.tests_history = {}
    CreateTimeEvent("igi_tests", "tests", 2, integration_tests_worker)
end

function integration_tests_worker()
    if STATE.current_test then return end
    local caches = STATE.current_tests_name == "entity" and SUBTASK_TESTS or flat_quests()
    local id, next_cache = next(caches, STATE.last_test)
    STATE.last_test = id
    if id then
        start_integration_test(id, next_cache)
        return
    end

    STATE.current_tests_name = nil
    report_tests_history()
    return true
end

function start_integration_test(id, cache)
    trace_assert(not STATE.current_test, "Already running a test!")
    trace_dbg("Running test: "..id, cache)
    STATE.current_test = id

    local ok, mock = pcall(prepare_mock_quest, cache, id)

    if ok and mock then
        task_manager.get_task_manager():give_task(id)
        CreateTimeEvent("igi_tests", "current_test", 0, continue_test_worker)
    elseif cache.quest_id and igi_mcm.get_task_value(cache.quest_id, "disabled") then
        STATE.tests_history[STATE.current_test] = RESULT.DISABLED
        finish_test()
    else
        assert_test(nil, "Can't prepare quest")
    end
end

local function choose_entity(CACHE)
    trace_dbg("choose entity", CACHE)
    if not CACHE._test_entity_id then
        local k, entity = next(CACHE.entities, nil)
        CACHE._test_entity_id = k
    end

    local entity = CACHE.entities[CACHE._test_entity_id]
    while entity.status ~= "RUNNING" or not entity.target do
        local k
        k, entity = next(CACHE.entities, CACHE._test_entity_id)
        CACHE._test_entity_id = k
        if not k then
            trace_dbg("chosen: ", "nil")
            return nil
        end
    end
    trace_dbg("chosen: ", CACHE._test_entity_id)
    return entity
end

function continue_test_worker()
    local id = STATE.current_test
    trace_dbg("continuing test "..id, igi_generic_task.TASKS_CACHE[id])
    local CACHE = igi_generic_task.TASKS_CACHE[id]
    if not CACHE then
        finish_test()
        return true
    end
    local entity = choose_entity(CACHE)
    if not entity then
        assert_test(CACHE.status == "COMPLETED" or CACHE.status == "READY_TO_FINISH", "Quest was not completed")
        finish_test()
        return true
    end

    local target_tbl = igi_taskdata.get_target_table(entity.target)
    trace_assert(target_tbl.test, "Test is not implemented for target "..entity.target)

    local ok, finished = pcall(target_tbl.test, entity)
    if not ok then
        assert_test(nil, finished)
        finish_test()
        return true
    end

    if finished then
        finish_test()
        return true
    end
    ResetTimeEvent("igi_tests", "current_test", 1)
end

function finish_test()
    if not STATE.current_test then return end
    trace_dbg("Test concluded! "..STATE.current_test)
    if (STATE.current_tests_name ~= "normal") then
        task_manager.get_task_manager():set_task_completed(STATE.current_test)
    end

    if not STATE.tests_history[STATE.current_test] then
        STATE.tests_history[STATE.current_test] = RESULT.SUCCESS
    end

    STATE.current_test = nil
end

function assert_test(successful, reason, ...)
    if successful then return successful end
    actor_menu.set_fade_msg("WTF: test "..STATE.current_test.." failed: "..reason, 10, {G = 10, B = 10})
    trace_dbg("Test unsuccessful! ", STATE.current_test, reason, ...)
    STATE.tests_history[STATE.current_test] = RESULT.FAIL
    finish_test()
end

local function get_level_id(se_obj)
	local WorldState = igi_world_state.WorldState
    return WorldState.gg:vertex(se_obj.m_game_vertex_id):level_id()
end

function teleport_to_player(se_obj)
    assert(se_obj:section_name() ~= "smart_terrain", "Are you teleporting smarts?")

    if se_obj and se_obj.commander_id then
        TeleportSquad(se_obj, db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id())
    else
        TeleportObject(se_obj.id, db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id())
    end
end

function travel_to_se_obj(se_obj)
    if get_level_id(se_obj) == get_level_id(alife():object(0)) then
		db.actor:set_actor_position(se_obj.position)
	else
        assert(not igi_mcm.get_options_value("fast_tests"), "Don't change levels when fasts tests are enabled")
		ChangeLevel(se_obj.position, se_obj.m_level_vertex_id, se_obj.m_game_vertex_id, VEC_ZERO, false)
	end
end

function start_normal_tests()
    xrs_debug_tools.debug_invis = true
    STATE.current_tests_name = "normal"
    STATE.tests_history = {}
    CreateTimeEvent("igi_tests", "tests", 1, normal_tests_worker)
end

function normal_tests_worker()
    if STATE.current_test then return end
    local id, data = next(TESTS, STATE.last_test)
    STATE.last_test = id
    if not id then
        STATE.current_tests_name = nil
        report_tests_history()
        return true
    end

    trace_dbg("Running test: "..id, data)
    news_manager.send_tip(db.actor, "Test started: "..id, nil, nil, 2000)
    STATE.current_test = id
    STATE.current_test_state = dup_table(data[2])
    CreateTimeEvent("igi_tests", "current_test", 0, continue_normal_test_worker)
end

function continue_normal_test_worker()
    if not STATE.current_test then return true end
    local id = STATE.current_test
    trace_dbg("continuing test "..id, STATE.current_test_state)
    local ok, next_iteration = pcall(TESTS[id][1], STATE.current_test_state)
    ResetTimeEvent("igi_tests", "current_test", type(next_iteration) == "number" and next_iteration or 1)

    -- in case it failed current test is reset
    if STATE.current_test then
        assert_test(ok, "Test function crashed", next_iteration)
    end
    if not next_iteration and STATE.current_test then
        finish_test()
        return true
    end
end
