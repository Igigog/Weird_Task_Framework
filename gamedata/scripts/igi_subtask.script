TASK_STATUSES = {
	RUNNING = nil,	-- no value means running
	COMPLETED = "complete",
	FAILED = "fail",
	READY_TO_FINISH = "READY_TO_FINISH",
}

function finish_all_subtasks(CACHE)
	if CACHE.status ~= TASK_STATUSES.FAILED then
		CACHE.status = TASK_STATUSES.COMPLETED
	end

	for _, entity in pairs(CACHE.entities) do
		if entity.status == TASK_STATUSES.READY_TO_FINISH then
			entity.status = CACHE.status
		end
	end
end

function update_current_map_target(CACHE)
	if CACHE.status == TASK_STATUSES.COMPLETED
		or CACHE.status == TASK_STATUSES.READY_TO_FINISH then
		CACHE.quest_targets = {CACHE.task_giver_id}
	else
		CACHE.quest_targets = get_quest_target(CACHE.entities, CACHE)
	end
end

function process_subtasks(CACHE)
	local updated = false
	for _, entity in pairs(CACHE.entities) do
		if entity.status == TASK_STATUSES.RUNNING
				or entity.status == TASK_STATUSES.READY_TO_FINISH then
			if update_entity_status(entity, CACHE) then
				igi_callbacks.invoke_callbacks("on_subtask_status_change", CACHE, entity)
				updated = true
			end
		end
	end

	if updated then
		CACHE.status = get_task_status(CACHE.entities, CACHE)
	end

	return updated
end

function get_quest_target(entities, CACHE)
	local got_first = false
	local targets = {}
	for _, entity in ipairs(entities) do
		local controller = igi_taskdata.get_controller(entity, CACHE)
		if controller.status and controller.quest_target
			and entity.status == TASK_STATUSES.RUNNING then
				if (not got_first or entity.subtask) then
					got_first = true
					targets[#targets+1] = controller.quest_target(entity)
				end
		end
	end
	return targets
end

function get_task_status(entities, CACHE)
	local ready_to_finish = false
	local running = false
	for _, entity in pairs(entities) do
		local controller = igi_taskdata.get_controller(entity, CACHE)
		if controller.status then
			if entity.status == TASK_STATUSES.FAILED and not entity.optional then
				return TASK_STATUSES.FAILED
			end
	
			if entity.status == TASK_STATUSES.RUNNING then
				running = true
			elseif entity.status == TASK_STATUSES.READY_TO_FINISH then
				ready_to_finish = true
			end
		end
	end

	if running then return TASK_STATUSES.RUNNING
	elseif ready_to_finish then return TASK_STATUSES.READY_TO_FINISH
	else return TASK_STATUSES.COMPLETED end
end

function update_entity_status(entity, CACHE)
	local controller = igi_taskdata.get_controller(entity, CACHE)
	if not controller.status then return false end
	local new_status = controller.status(entity)
	if new_status == entity.status then return false end
	entity.status = new_status
	return true
end

function update_entities(CACHE)
	if not CACHE._queue then return end
	igi_helper.trace_dbg("Update: updating entities", CACHE)
	for _, v in ipairs(CACHE._queue.add) do
		enable_entities(v, CACHE)
		init_entities(v, CACHE)
	end

	igi_helper.trace_dbg("Update: After adding", CACHE)
	for _, v in ipairs(CACHE._queue.rem) do
		disable_entities(v, CACHE)
	end

	CACHE._queue = nil
	igi_helper.trace_dbg("Update: finish", CACHE)
end

function enable_entities(key, CACHE)
    igi_helper.trace_assert(key ~= nil and type(CACHE[key]) == "table", "Can't enable entities: No table for key " .. tostring(key) .. ".")

    igi_helper.trace_dbg("Enable: enable entities", key, CACHE[key])

    local to_add = CACHE[key]

	-- Add and generate
    for k, entity in ipairs(to_add) do
        igi_helper.trace_dbg("Enable: Processing entity", entity)
        entity._group = key

        local link_context = igi_text_processor.get_link_context(CACHE, entity)
        local new_entities = igi_generate.generate(entity, link_context)

        for _, new_entity in ipairs(new_entities) do
            CACHE.entities[#CACHE.entities+1] = new_entity
        end
        to_add[k] = nil
    end

    CACHE[key] = nil
    igi_helper.trace_dbg("Enable: after run", key, CACHE)
end

function disable_entities(key, CACHE)
	-- De-initialize
	for _, v in pairs(CACHE.entities) do
		if v._group == key then
			local link_context = igi_text_processor.get_link_context(CACHE)
			igi_text_processor.resolve_table(v, link_context, "del")
		end
	end

	-- Remove from table
	for _ = 1, #CACHE.entities, 1 do
		local rem_k
		for k, v in pairs(CACHE.entities) do
			if v._group == key then
				rem_k = k
				break
			end
		end
		if not rem_k then
			break
		end

		CACHE._removed = CACHE._removed or {}
		CACHE._removed[#CACHE._removed+1] = table.remove(CACHE.entities, rem_k)
	end
end

function init_entities(key, CACHE)
	-- Initialize
	for _, v in pairs(CACHE.entities) do
		if v._group == key then
			local link_context = igi_text_processor.get_link_context(CACHE, v)
			igi_text_processor.resolve_table(v, link_context, "init")
		end
	end
end
