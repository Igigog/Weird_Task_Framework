local trace_dbg = igi_helper.trace_dbg
local trace_assert_no_crash = igi_helper.trace_assert_no_crash
local trace_assert = igi_helper.trace_assert

-------------------------------------------------
-- JSON functions
-------------------------------------------------
local json = igi_json.get_json()

local function get_game_path()
	local info = debug.getinfo(1,'S');
	local script_path = info.source:match[[^@?(.*[\/])[^\/]-$]]
	local game_path = script_path:match("(.*)gamedata"):gsub("/", "\\")
	return game_path
end

local default_tasks_path = get_game_path().."gamedata\\configs\\igi_tasks\\tasks\\"

local function get_task_path(task_name, prefix)
	return prefix.."\\"..task_name..".json"
end

local function get_file_content(path)
	file = trace_assert_no_crash(io.open(path, "rb"))
	if not file then return end
	local content = file:read "*a" -- *a or *all reads the whole file
	file:close()
	return content
end

local function get_raw_task_table(task_name, prefix)
	local task_path = get_task_path(task_name, prefix)
	local content = get_file_content(default_tasks_path..task_path)
	if not content then return end

	trace_dbg("raw task content: ", content)
    return json.decode(content)
end

function remove_empty_tables(tbl)
	for k, v in pairs(tbl) do
		if type(v) == "table" and remove_empty_tables(v) then
			tbl[k] = nil
		end
 	end
	return not next(tbl)
end

function get_task_table(task_name, prefix)
	trace_dbg("get_task_data: "..prefix.." "..task_name)
	local task_table = trace_assert(
		get_raw_task_table(task_name, prefix),
		"task_json: no json file for task "..prefix.."_"..task_name
	)

	task_table.description_key = task_table.description_key or (prefix.."_"..task_name)
	task_table.quest_id = {prefix, task_name}

	return task_table
end

local IGI_QUESTS = {}
function get_all_quests()
	if not next(IGI_QUESTS) then
		local meta_ltx = igi_db.LtxView("pack_meta\\base_meta.ltx")
		for _, meta_section in meta_ltx:iter() do
			trace_dbg("meta", meta_section, meta_section.prefix)
			local prefix = meta_section.prefix
			IGI_QUESTS[prefix] = {}

			local files = getFS():file_list_open("$game_config$",
			"igi_tasks\\tasks\\"..prefix.."\\",
			1+4+8)

			for i=0, files:Size()-1 do
				local quest_name = files:GetAt(i)
				IGI_QUESTS[prefix][quest_name] = get_task_table(quest_name, prefix)
			end
		end
	end
	return IGI_QUESTS
end

local function get_task_data(quest_id)
	local prefix, task_name = igi_helper.get_task_name(quest_id)
	local task_tbl = get_task_table(task_name, prefix)
	trace_assert(task_tbl, "No such task: " .. tostring(quest_id or "nil"))

	igi_callbacks.invoke_callbacks("on_get_taskdata", task_tbl, quest_id)
	return task_tbl
end
get_task_data = igi_utils.memoize_one_variable(get_task_data, "task_data")

-------------------------------------------------
-- global functions
-------------------------------------------------
function get_task_cache(quest_id, task_id, tg_id)
	return finalize_task_cache(get_task_data(quest_id), task_id, tg_id)
end

function finalize_task_cache(task_data, task_id, tg_id)
	local CACHE = dup_table(task_data)
	CACHE.quest_givers = nil	-- not needed
	CACHE.task_id = task_id
	CACHE.task_giver_id = tg_id

	for _, entity in pairs(CACHE.entities) do
		entity.tags = entity.tags or {}
		entity.functors = entity.functors
			or get_target_table(entity.target or "basic").FUNCTORS
			or {
				setup = {"igi_target_basic.setup_"..entity.entity_type},
				create = {"igi_target_basic.create_"..entity.entity_type},
				cleanup = {},
			}
	end

	igi_text_processor.resolve_macros_and_link_variables(CACHE)
	igi_text_processor.resolve_and_link_cache(CACHE)

	trace_dbg("finalized CACHE", CACHE)
	return CACHE
end

function get_target_table(target)
	if not target then return end
	local target_tbl = _G["igi_target_"..target]
	trace_assert(target_tbl, "No target tbl for target "..tostring(target or "nil"))

	if target ~= 'basic' then
		setmetatable(target_tbl, {__index = get_target_table(target_tbl.PATTERN or 'basic')})
	end
	return target_tbl
end
get_target_table = igi_utils.memoize_one_variable(get_target_table, "target_table")
