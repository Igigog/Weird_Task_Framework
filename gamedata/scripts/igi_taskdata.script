local trace_dbg = igi_helper.trace_dbg
local trace_assert = igi_helper.trace_assert

-------------------------------------------------
-- JSON functions
-------------------------------------------------
local json = igi_json.get_json()

local function get_game_path()
	local info = debug.getinfo(1,'S');
	local script_path = info.source:match[[^@?(.*[\/])[^\/]-$]]
	local game_path = script_path:match("(.*)gamedata"):gsub("/", "\\")
	return game_path
end

local default_tasks_path = get_game_path().."gamedata\\configs\\igi_tasks\\tasks\\"

local function get_file_content(path)
	file = io.open(path, "rb")
	if not file then return end
	local content = file:read "*a" -- *a or *all reads the whole file
	file:close()
	return content
end

function get_task_table(task_name, prefix)
	local task_path = prefix .. "\\" .. task_name .. ".json"
	local content = get_file_content(default_tasks_path .. task_path)
	if not content then return {} end
	local task_table = json.decode(content)

	task_table.description_key = task_table.description_key
									or (igi_description.TEXT_HEADER..prefix.."_"..task_name)
	task_table.quest_id = {prefix, task_name}
	return task_table
end

local IGI_QUESTS = {}
function get_all_quests()
	if not next(IGI_QUESTS) then
		local packs = getFS():file_list_open(
			"$game_config$", "igi_tasks\\tasks\\", 2 + 4 + 8)
		for i = 0, packs:Size() - 1 do
			local prefix = string.gsub(packs:GetAt(i), "\\", "")
			IGI_QUESTS[prefix] = {}

			local files = getFS():file_list_open(
				"$game_config$", "igi_tasks\\tasks\\"..prefix.."\\", 1 + 8)

			for j=0, files:Size()-1 do
				local quest_name = string.match(files:GetAt(j), "(.*)%.json$")
				if quest_name then
					IGI_QUESTS[prefix][quest_name] = get_task_table(quest_name, prefix)
				end
			end
		end
	end
	return IGI_QUESTS
end

function supported_wtf_versions()
	return {
		["4.0"] = true
	}
end

local function get_task_data(quest_id)
	local prefix, task_name = igi_helper.get_task_name(quest_id)
	local task_tbl = get_task_table(task_name, prefix)
	trace_assert(task_tbl, "No such task: " .. tostring(quest_id or "nil"))
	if not supported_wtf_versions()[task_tbl.WTF_VERSION] then
		local list = {}
		for k in pairs(supported_wtf_versions()) do
			list[#list+1] = k
		end
		igi_helper.trace_error("[" .. prefix .. ":" .. task_name .. 
						']: Unsupported WTF_VERSION! Supported are: \\n"' .. table.concat(list, '", "') .. '"')
		assert(nil)
	end

	igi_callbacks.invoke_callbacks("on_get_taskdata", task_tbl, quest_id)
	return task_tbl
end

-------------------------------------------------
-- global functions
-------------------------------------------------
function get_task_cache(quest_id, task_id, tg_id)
	return finalize_task_cache(get_task_data(quest_id), task_id, tg_id)
end

function finalize_task_cache(task_data, task_id, tg_id)
	local CACHE = dup_table(task_data)
	CACHE.quest_givers = nil	-- not needed
	CACHE.task_id = task_id
	CACHE.task_giver_id = tg_id

	trace_dbg("finalized CACHE", CACHE)
	return CACHE
end

local NO_CONTROLLER = {}
function get_controller(entity, CACHE)
	if not entity.CONTROLLER then return NO_CONTROLLER end
	trace_assert(CACHE, "get_controller: no cache")
	local link_context = igi_text_processor.get_link_context(CACHE, entity)
	local controller = igi_text_processor.eval_logic_macro(entity.CONTROLLER, link_context)
	trace_assert(type(controller) == "table", "Controller is not a table", entity.CONTROLLER)
	return controller
end
