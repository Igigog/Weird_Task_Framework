TARGET_NAME = "return"
PATTERN = "basic"
FUNCTORS = {
	status = {script_name()..".status"},
}

local TASK_STATUSES = igi_subtask.TASK_STATUSES
local trace_dbg = igi_helper.trace_dbg
local WorldState = igi_world_state.WorldState

function is_failed(se_obj, section_name)
	if not se_obj then return true end
	return se_obj:section_name() ~= section_name
end

function ready_to_finish(se_obj)
	return se_obj.parent_id == 0
end

function status(entity)
	local se_obj = WorldState.objects[entity.id]
	if is_failed(se_obj, entity.section_name) then return TASK_STATUSES.FAILED end
	if ready_to_finish(se_obj) then return TASK_STATUSES.READY_TO_FINISH end
	return TASK_STATUSES.RUNNING
end

function entity_on_complete(obj_data)
	local obj = WorldState.objects[obj_data.id]
	alife_release(obj)
	news_manager.relocate_item(db.actor, "out", obj_data.section_name, 1)
end

function quest_target(obj_data)
	local se_obj = WorldState.objects[obj_data.id]
	if not se_obj then return end

	return se_obj.parent_id == 65535 and obj_data.id or se_obj.parent_id
end

function get_item_cost(entity)
	config_cost = tonumber(ini_sys:r_string_ex(entity.section_name, "cost"))
	if config_cost == 0 then
		return 500
	end
	return config_cost
end


function get_item_weight(entity)
	return tonumber(ini_sys:r_string_ex(entity.section_name, "inv_weight"))
end

function get_complexity(entity)
	return get_item_cost(entity) * get_item_weight(entity) / 32
end

function test(entity)
	local assert_test = igi_tests.assert_test
	entity._test_stage = (entity._test_stage or 0) + 1

	if entity._test_stage == 1 then
		local se_obj = igi_helper.get_binded_object(entity)
		assert_test(se_obj, "Entity does not exist")
		if igi_mcm.get_options_value("fast_tests") then
			igi_tests.teleport_to_player(se_obj)
		else
			igi_tests.travel_to_se_obj(se_obj)
		end

	elseif entity._test_stage == 2 then
		local se_obj = igi_helper.get_binded_object(entity)
		local obj = get_object_by_id(se_obj.id)
		db.actor:transfer_item(obj, db.actor)

	elseif entity._test_stage == 3 then
		assert_test(entity.status == "READY_TO_FINISH", "Quest did not complete")
		return true
	end
end
igi_tests.register_subtask_test("test_target_return", {
	entities = {
		{
			entity_type = "item",
			section_name = "itm_drugkit",
			target = "return",
			to_create =  true,
			where =  "[smart.id]",
		},

		{
			entity_type = "location",
			search_for =  "smart",
			where = "0,0",
			link_id = "smart",
		}
	}
})
