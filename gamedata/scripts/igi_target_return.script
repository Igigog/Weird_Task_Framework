local TASK_STATUSES = igi_subtask.TASK_STATUSES
local trace_assert = igi_helper.trace_assert

Return = {}
function Return.on_init(entity)
	trace_assert(type(entity.id) == "number", "Return: entity.id is not a number", entity)
	trace_assert(alife_object(entity.id), "Return: no server object for this id", entity)
end

function Return.status(entity)
	local se_obj = alife_object(entity.id)
	if not se_obj then return TASK_STATUSES.FAILED end
	if se_obj.parent_id == 0 then return TASK_STATUSES.READY_TO_FINISH end
	return TASK_STATUSES.RUNNING
end

function Return.on_complete(obj_data)
	local obj = assert(alife_object(obj_data.id))
	news_manager.relocate_item(db.actor, "out", obj:section_name(), 1)
	alife_release(obj)
end

function Return.quest_target(obj_data)
	local se_obj = alife_object(obj_data.id)
	if not se_obj then return end

	return se_obj.parent_id == 65535 and obj_data.id or se_obj.parent_id
end

function get_item_cost(section_name)
	---@diagnostic disable-next-line: undefined-field
	config_cost = tonumber(ini_sys:r_string_ex(section_name, "cost"))
	if config_cost == 0 then
		return 500
	end
	return config_cost
end


function get_item_weight(section_name)
	---@diagnostic disable-next-line: undefined-field
	return tonumber(ini_sys:r_string_ex(section_name, "inv_weight"))
end

function Return.complexity(entity)
	local section = entity.section_name or (type(entity.id) == "number" and alife_object(entity.id):section_name())
	if not section then
		return 1000, 5000
	end

	local weight = math.max(1, get_item_weight(section))
	return get_item_cost(section) * weight / 32
end

function Return.test(entity)
	local assert_test = igi_tests.assert_test
	entity._test_stage = (entity._test_stage or 0) + 1

	if entity._test_stage == 1 then
		local se_obj = alife_object(entity.id)
		assert_test(se_obj, "Entity does not exist")
		if igi_mcm.get_options_value("fast_tests") then
			igi_tests.teleport_to_player(se_obj)
		else
			igi_tests.travel_to_se_obj(se_obj)
		end

	elseif entity._test_stage == 2 then
		local se_obj = alife_object(entity.id)
		local obj = get_object_by_id(se_obj.id)
		db.actor:transfer_item(obj, db.actor)

	elseif entity._test_stage == 3 then
		assert_test(entity.status == "READY_TO_FINISH", "Quest did not complete")
		return true
	end
end
