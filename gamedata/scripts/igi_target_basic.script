------------------------------------------------
-- LOCALS
-- No actual grouping, these are used to lower other functions complexity
------------------------------------------------
local trace_dbg = igi_helper.trace_dbg
local trace_assert = igi_helper.trace_assert
local WorldState = igi_world_state.WorldState
local TASK_STATUSES = igi_subtask.TASK_STATUSES

function force_parent_online(se_obj)
	if se_obj.parent_id == 65535 then return end
	local parent = WorldState.objects[se_obj.parent_id]
	local p_clsid = parent:clsid()
	if IsStalker(parent, p_clsid)
			or IsMonster(parent, p_clsid)
			or p_clsid == clsid.online_offline_group_s
			then
		parent.force_online = true
		parent.stay_time = game.get_game_time()
	end
end

------------------------------------------------
-- DESCRIPTION
-- Prepares description
------------------------------------------------

function get_location_description(entity)
	return get_smart_name_by_id(entity.id)
		or get_smart_name_by_id(entity.where)
		or (entity.id and dynamic_news_helper.GetPointDescription(WorldState.objects[entity.id]))
		or nil
end

function get_smart_name_by_id(id)
	if tonumber(id) and SIMBOARD.smarts[id] then
		local smart = WorldState.objects[id]
		return "st_" .. smart:name() .. "_name"
	end
end

function get_description(entity)
	if type(entity.id) == "number" then
		local se_obj = WorldState.objects[entity.id]
		local parent_npc = igi_helper.is_common_npc(se_obj.parent_id) and WorldState.objects[se_obj.parent_id]

		return {
			locations = {get_location_description(entity)},
			factions = {se_obj.player_id or parent_npc and alife_character_community(parent_npc) or nil},
			targets = {parent_npc and parent_npc:character_name() or nil}
		}
	else
		return {
			factions = {entity.faction or ini_sys:r_string_ex(entity.section_name, "faction")},
			locations = { get_smart_name_by_id(entity.where) },
			targets = {ini_sys:r_string_ex(entity.section_name, "inv_name_short")}
		}
	end
end

------------------------------------------------
-- CREATE FUNCTIONS
-- Called after getting a task to create/prepare actual game objects
------------------------------------------------

function squad_create(smart_id, section)
	assert(smart_id and section, "No smart_id or section")
	return utils_obj.create_squad(section, alife_object(smart_id):name())
end

function init_squad(id)
	local se_obj = alife_object(id)
	se_obj.stay_time = game.get_game_time()
	se_obj.force_online = true
end

function create_on_smart(section_name, smart_id)
	local smart = SIMBOARD.smarts[smart_id].smrt
	local location = vector():set(
		smart.position.x,
		smart.position.y+1,
		smart.position.z)

	local se_obj = alife_create(section_name,
		location, smart.m_level_vertex_id, smart.m_game_vertex_id)
	return se_obj.id
end

function create_in_inventory(section_name, parent_id)
	local parent = WorldState.objects[parent_id]
	local se_obj = alife_create_item(section_name, parent)
	if (parent.id == 0) then
		news_manager.relocate_item(db.actor, "in", section_name, 1)
	end
	return se_obj.id
end

------------------------------------------------
-- OTHER FUNCTIONS
-- Lorem ipsum dolor sit amet, consectetur adipiscing elit.
------------------------------------------------

function quest_target(entity)
	return entity.id
end

function get_complexity(entity)
	return 4000
end
