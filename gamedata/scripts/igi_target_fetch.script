TARGET_NAME = "fetch"
PATTERN = "basic"
FUNCTORS = {
	status = {script_name()..".status"},
}

local trace_assert = igi_helper.trace_assert
local trace_dbg = igi_helper.trace_dbg
local TASK_STATUSES = igi_subtask.TASK_STATUSES

function ready_to_finish(obj_data)
	local ids = get_fetched_items(obj_data)
	local amount = obj_data.amount or 1
	for id, itm_amount in pairs(ids) do
		if amount <= 0 then
			ids[id] = nil
		end
		amount = amount - itm_amount
	end
	obj_data._ids = ids
	return amount <= 0
end

function get_fetched_items(obj_data)
	local section = obj_data.section_name
	local total = 0
	local ids = {}
	local is_multi = IsItem("multiuse",section)
	local is_ammo = IsItem("ammo",section)

	local function itr(temp, obj)
		if not string.find(obj:section(), section) then return end
		if is_multi then
			ids[obj:id()] = obj:get_remaining_uses()
			total = total + obj:get_remaining_uses()
		elseif is_ammo then
			ids[obj:id()] = obj:ammo_get_count()
			total = total + obj:ammo_get_count()
		else
			ids[obj:id()] = 1
			total = total + 1
		end
	end
	db.actor:iterate_inventory(itr, nil)
	return ids, total
end

function status(entity)
	if ready_to_finish(entity) then return TASK_STATUSES.READY_TO_FINISH end
	return TASK_STATUSES.RUNNING
end

function quest_target(entity)
	return -1
end

function get_description(entity)
	local item_name = ini_sys:r_string_ex(entity.section_name, "inv_name")
	local str = game.translate_string(item_name)..", "..tostring(entity.amount or 1)
	if igi_mcm.get_options_value("utjan_fetch_thing") then
		local _, amount = get_fetched_items(entity)
		str = str .. " " .. string.format(game.translate_string("igi_tasks_utjan_fetch_need"), amount)
	end
	return {
		targets = {str}
	}
end

function get_item_base_cost(section)
	local max_uses = IsItem("multiuse",section) or 1
	local cost = ini_sys:r_float_ex(section,"cost") * (1 / max_uses)
	return cost
end

local function is_scaled_by_condition(sec)
	if IsItem("multiuse",sec) then return false end
	if IsItem("device",sec) then return false end
	if IsItem("battery", sec) then return false end
	return true
end

function give_arti_container(obj)
	local sec = obj:section()

	if (string.find(sec, "(lead.-_box)",3)) then
		alife_create_item("lead_box", db.actor)
	elseif (string.find(sec, "(af.-_iam)",3)) then
		alife_create_item("af_iam", db.actor)
	elseif (string.find(sec, "(af.-_aac)",3)) then
		alife_create_item("af_aac", db.actor)
	elseif (string.find(sec, "(af.-_aam)",3)) then
		alife_create_item("af_aam", db.actor)
	end
end

function release_fetch_items(entity)
	local amount = entity.amount or 1
	for id, itm_amount in pairs(entity._ids) do
		amount = amount - itm_amount
		local obj = get_object_by_id(id)
		if obj:section() ~= entity.section_name then
			give_arti_container(obj)
		end
		alife_release(igi_world_state.WorldState.objects[id])
	end

	if amount < 0 then
		alife_create_item(entity.section_name, db.actor, {uses = -amount})
	end
end

function get_complexity(entity)
	local base_cost = get_item_base_cost(entity.section_name)
	local scaled_by_condition = is_scaled_by_condition(entity.section_name)
	if entity._ids and scaled_by_condition then
		local money = 0
		for id in pairs(entity._ids) do
			local condition = get_object_by_id(id):condition()
			money = money + base_cost * condition * condition
		end
		return money
	end

	return base_cost * (entity.amount or 1)
end

function entity_on_complete(entity)
	release_fetch_items(entity)
	news_manager.relocate_item(db.actor, "out", entity.section_name, entity.amount or 1)
end

function test(entity)
	local assert_test = igi_tests.assert_test
	local WorldState = igi_world_state.WorldState
	entity._test_stage = (entity._test_stage or 0) + 1

	if entity._test_stage == 1 then
		local se_actor = WorldState.objects[0]
		for _=1, (entity.amount or 1) do
			alife_create_item(entity.section_name, se_actor)
		end

	elseif entity._test_stage == 3 then
		assert_test(entity.status == "READY_TO_FINISH", "Quest did not complete")
		return true
	end
end

igi_tests.register_subtask_test("test_target_fetch", {
	entities = {
		{
			entity_type = "item",
			target = "fetch",
			section_name = "mutant_part_crow_beak",
		}
	}
})
