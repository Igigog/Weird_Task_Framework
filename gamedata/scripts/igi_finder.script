-- Object finder functions
local trace_assert = igi_helper.trace_assert
local trace_dbg = igi_helper.trace_dbg

function on_game_start()
    RegisterScriptCallback("actor_on_first_update", actor_on_first_update)
	blacklist = igi_helper.db_ini:collect_section("map_blacklist")
	smart_blacklist = igi_helper.db_ini:collect_section("smart_blacklist")
end

function actor_on_first_update()
    sort_levels_by_distance()
	sort_smarts_by_level()
end

WorldState = {
	levels_by_distance = igi_utils.defaultdict(function () return {} end),
	smarts_by_level = igi_utils.defaultdict(function () return {} end),
	distance_by_level = {},
}

------------------------------

function sort_levels_by_distance()
	local actor_level = level.name()
    local levels_by_distance = WorldState.levels_by_distance
    local distance_by_level = WorldState.distance_by_level

	levels_by_distance[0] = {[actor_level] = true}
	distance_by_level[actor_level] = 0
	local visited = {[actor_level] = true}

	local cur_distance = 0
	local changes = true
	while changes do
		cur_distance = cur_distance + 1
		changes = false

		for start_level in pairs(levels_by_distance[cur_distance-1]) do
			local connected_levels = simulation_objects.config:r_value(
				start_level, "target_maps", 0, "")

			for con_level in connected_levels:gmatch("[^ ,]+") do
				if not visited[con_level] then
					visited[con_level] = true
					changes = true
					levels_by_distance[cur_distance][con_level] = true
					distance_by_level[con_level] = cur_distance
				end
			end
		end
	end
end

function sort_smarts_by_level()
	local sim = alife()
	local gg = game_graph()
    local smarts_by_level = WorldState.smarts_by_level

	for name, smart in pairs(SIMBOARD.smarts_by_names) do
		local smart_level = sim:level_name(gg:vertex(smart.m_game_vertex_id):level_id())
		smarts_by_level[smart_level][name] = true
	end
end

local function is_smart_good(smart_name, smart_level)
	local in_blacklist = smart_blacklist[smart_name] or
		(smart_level ~= level.name() and blacklist[smart_level])
	local is_base = simulation_objects.base_smarts[smart_name]

	local smart_id = SIMBOARD.smarts_by_names[smart_name].id
	local is_available = simulation_objects.available_by_id[smart_id]

	return is_available and not (is_base or in_blacklist)
end
------------

local function check_location(se_obj, lower_bound, higher_bound)
	local obj_level = alife():level_name(igi_helper.get_object_level_id(se_obj))
	if blacklist[obj_level] then return false end

	local dist = WorldState.distance_by_level[obj_level]
	return dist >= lower_bound and dist <= higher_bound
end

local function is_parent_enemy(se_obj)
	if se_obj.parent_id == 65535 then return end
	local my_faction = get_object_community(db.actor)
	local npc_faction = get_object_community(alife_object(se_obj.parent_id))
	return game_relations.is_factions_enemies(my_faction, npc_faction)
end

function find_objects_in_world(lower_bound, higher_bound, sections)
	trace_assert(next(sections), "No sections were given for searching")

	local sim = alife()
	local sim_object = sim.object
	local out = {}
	for id=1,65534 do
		local se_obj = sim_object(sim, id)
		if se_obj and se_obj.parent_id == 65535 
				and sections[se_obj:section_name()]
				and check_location(se_obj, lower_bound, higher_bound) then
			out[#out+1] = id
		end
	end

	return out
end

function find_items_in_enemy(lower_bound, higher_bound, sections)
	trace_assert(next(sections)	, "No sections were given for searching")
	
	local sim = alife()
	local sim_object = sim.object
	local out = {}
	for id=1,65534 do
		local se_obj = sim_object(sim, id)
		if se_obj
				and check_location(se_obj, lower_bound, higher_bound)
				and igi_helper.is_common_npc(se_obj.parent_id)
				and is_parent_enemy(se_obj) then
			for section in pairs(sections) do
				if string.find(se_obj:section_name(), section) then
					out[#out+1] = id
					break
				end
			end
		end
	end
	return out
end

function get_smarts(lower_bound, higher_bound)
	local smart_list = {}
	for i=lower_bound, higher_bound do
		for level in pairs(WorldState.levels_by_distance[i]) do
			for smart_name in pairs(WorldState.smarts_by_level[level]) do
				if is_smart_good(smart_name, level) then
					smart_list[#smart_list+1] = SIMBOARD.smarts_by_names[smart_name].id
				end
			end
		end
	end

	return smart_list
end

function get_stashes(lower_bound, higher_bound)
	local stashes = treasure_manager.caches
	local returned_stashes = {}
	for id, is_not_available in pairs(stashes) do
		local se_obj = alife_object(id)
		local suitable = se_obj and check_location(se_obj, lower_bound, higher_bound)
		if (not is_not_available) and suitable then
			returned_stashes[#returned_stashes+1] = id
		end
	end
	trace_dbg("Stashes: ", returned_stashes)
	return returned_stashes
end
