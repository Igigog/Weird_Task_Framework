local trace_dbg = igi_helper.trace_dbg

function update_actions(CACHE)
	local link_context = igi_text_processor.LinkContext:new(CACHE)

	for _, entity in pairs(CACHE.entities) do
		link_context:set_this(entity)
		process_actions(entity.actions, link_context)
	end
	link_context:set_this({})

	process_actions(CACHE.actions, link_context)
end

function process_actions(actions, link_context)
	if type(actions) ~= "table" then return end
	for _, action in pairs(actions) do
		if (not action._done) and (not igi_text_processor.has_macro(action.when)) then
			local env = link_context:to_env()
			if igi_helper.eval(action.when, env) then
				trace_dbg("Run action", action)
				action._done = not igi_helper.eval(action.run, env)
			end
		end
	end
end

function change_faction(id, faction)
	local se_squad = alife_object(id)
	if not se_squad or not se_squad.squad_members then return end
	for npc in se_squad:squad_members() do
		local member = get_object_by_id(npc.id)
		if member then
			member:set_character_community(faction, 0, 0)
		end
	end
end

function is_online(id)
	local se_obj = alife_object(id)
	if not se_obj then return end

	if se_obj.squad_members then
		se_obj = se_obj:squad_members()()	-- stateful iterator, returns function
		for _,v in ipairs(db.OnlineStalkers) do
			if (v == se_obj.id) then
				return true
			end
		end
		return false
	end
	return se_obj.online
end

function is_low_condition(id, max_condition)
	local item = get_object_by_id(id)
	if not item then return false end
	return item:condition() < (max_condition / 100)
end

update_mark = function(id, mark)
	local has_spot = level.map_has_object_spot(id, mark) == 1
	local se_obj = alife_object(id)
	local object_in_world = se_obj and se_obj.parent_id == 65535

	if object_in_world and not has_spot then
		level.map_add_object_spot(id, mark, game.translate_string(mark))
	elseif (not object_in_world) and has_spot then
		level.map_remove_object_spot(id, mark)
	end
end
