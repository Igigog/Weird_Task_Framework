local trace_dbg = igi_helper.trace_dbg
local trace_assert = igi_helper.trace_assert
local WorldState = igi_world_state.WorldState

function check_conditions(conds)
	for _, condition in ipairs(conds) do
		if not igi_helper.eval(condition) then
			return false
		end
	end
	return true
end

function update_actions(CACHE)
	if not CACHE.actions then return end
	for _, action in pairs(CACHE.actions) do
		update_action(action)
	end
end

function update_action(action)
	if action._done then return end
	if not check_conditions(action.when) then return end
	trace_dbg("Update action", action.run)
	local to_rerun = igi_helper.eval(action.run)
	if not to_rerun then action._done = true end
end

function repair(id, condition)
	local item = igi_helper.level_object(id)
	if not item then return end
	item:set_condition(condition/100)
end

function change_faction(id, faction)
	local se_squad = WorldState.objects[id]
	if not se_squad or not se_squad.squad_members then return end
	for npc in se_squad:squad_members() do
		local member = igi_helper.level_object(npc.id)
		if member then
			member:set_character_community(faction, 0, 0)
		end
	end
end

function is_online(id)
	local se_obj = WorldState.objects[id]
	if not se_obj then return end

	if se_obj.squad_members then
		se_obj = se_obj:squad_members()()	-- stateful iterator, returns function
		for _,v in ipairs(db.OnlineStalkers) do
			if (v == se_obj.id) then
				return true
			end
		end
		return false
	end
	return se_obj.online
end

function is_low_condition(id, max_condition)
	local item = igi_helper.level_object(id)
	if not item then return false end
	return item:condition() < (max_condition / 100)
end

function goodwill(value)
	local task_giver = mob_trade.GetTalkingNpc()
	local community = igi_helper.get_community_by_id(task_giver:id())
	return db.actor:community_goodwill(community) >= value
end

function rank(tier)
	local quest_tiers = igi_db.SectionView("tiers.ltx", "player_tiers")
	trace_assert(quest_tiers[tier] or ranks.stalker_rank_intervals[tier],
		"Invalid quest tier")

	if quest_tiers[tier] then
		lower_bound = quest_tiers[tier][1]
		higher_bound = quest_tiers[tier][2]
	elseif ranks.stalker_rank_intervals[tier] then
		lower_bound = ranks.stalker_rank_intervals[tier][1]
		higher_bound = ranks.stalker_rank_intervals[tier][2]
	end
	local player_rank = db.actor:character_rank()
	return player_rank >= lower_bound and player_rank <= higher_bound
end

function daytime(lower_bound, higher_bound)
	local h_dt = (24 + higher_bound - lower_bound) % 24

	local game_t = game.get_game_time()
	local y, m, d = game_t:get()

	local t = game.CTime()
	t:set(y, m, d, lower_bound, 0, 0, 0)
	if not (game_t > t) then
		return false
	end

	local dt = game.CTime()
	dt:setHMS(h_dt, 0, 0)
	return game_t < (t + dt)
end
