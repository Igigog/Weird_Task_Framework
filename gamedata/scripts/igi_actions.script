local trace_dbg = igi_helper.trace_dbg
local WorldState = igi_world_state.WorldState

actions = {}
conditions = {}

function initialise_actions(CACHE)
	if not CACHE.actions then return end
	igi_text_processor.resolve_and_link_table(CACHE.actions, CACHE.entities)
end

function update_actions(CACHE)
	if not CACHE.actions then return end
	for _, action in pairs(CACHE.actions) do
		update_action(action)
	end
end

function update_action(action)
	if action._state == "finished" then return end
	if not are_conditions_fulfilled(action.conditions) then return end
	trace_dbg("Update action", action.run)
	local to_rerun = loadstring("return "..action.run)()
	if not to_rerun then action._state = "finished" end
end

function are_conditions_fulfilled(conds)
	for _, condition in ipairs(conds) do
		if not conditions[condition.type](condition) then
			return false
		end
	end
	return true
end

function repair(id, condition)
	local item = igi_helper.level_object(id)
	if not item then return end
	item:set_condition(condition/100)
end

function change_faction(id, faction)
	local se_squad = WorldState.objects[id]
	if not se_squad or not se_squad.squad_members then return end
	for npc in se_squad:squad_members() do
		local member = igi_helper.level_object(npc.id)
		if member then
			member:set_character_community(faction, 0, 0)
		end
	end
end

conditions.is_online = function (self)
	local se_obj = WorldState.objects[self.id]
	if not se_obj then return end

	if se_obj.squad_members then
		se_obj = se_obj:squad_members()()	-- stateful iterator, returns function
		for _,v in ipairs(db.OnlineStalkers) do
			if (v == se_obj.id) then
				return true
			end
		end
		return false
	end
	return se_obj.online
end

conditions.is_parent_dead = function (self)
	local se_obj = WorldState.objects[self.id]
	if not se_obj then return end

	local parent = WorldState.objects[se_obj.parent_id]
	return not parent:alive()
end

conditions.is_low_condition = function (self)
	local item = igi_helper.level_object(self.id)
	if not item then return false end
	return item:condition() < (self.max_condition / 100)
end
