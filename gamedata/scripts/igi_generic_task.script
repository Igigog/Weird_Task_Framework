-- =============================================================
--	Quest functions (igi_generic_task.script)
--	Anomaly 1.5.1
--	Igigog
-- =============================================================
TASKS_VERSION = "3.9"
TASK_SETUP = {}
TASKS_CACHE = {}

local trace_dbg = igi_helper.trace_dbg
local trace_assert = igi_helper.trace_assert
local WorldState = igi_world_state.WorldState
local TASK_STATUSES = igi_subtask.TASK_STATUSES
local last_tasks_version
NIL_ERROR = false

function on_game_start()
    RegisterScriptCallback("save_state",save_state)
    RegisterScriptCallback("load_state",load_state)
	RegisterScriptCallback("actor_on_first_update", actor_on_first_update)
	printf("Weird Tasks Framework "..TASKS_VERSION.." initialised")
end

function actor_on_first_update()
	if NIL_ERROR then
		news_manager.send_tip(db.actor,
			"Something is nil! Check nonnil() calls. WTF is not initialised.", nil, nil,
			30000)
	end

	if last_tasks_version ~= TASKS_VERSION then
		printf("Weird Tasks Framework: Updating " .. (TASKS_CACHE.TASKS_VERSION or "nil")
			.. " -> " .. TASKS_VERSION)
		news_manager.send_tip(db.actor, "WTF: Update complete. Welcome to WTF " .. TASKS_VERSION, nil, nil, 30000)
	end
end

function save_state(m_data)
	m_data.igi_tasks_cache = TASKS_CACHE
	m_data.igi_last_tasks_version = TASKS_VERSION
end

function load_state(m_data)
	TASKS_CACHE = m_data.igi_tasks_cache or {}
	last_tasks_version = m_data.igi_last_tasks_version
end

function get_cache(task_id)
	return TASKS_CACHE[task_id]
end

function get_setup_cache(task_id)
	return TASK_SETUP[task_id]
end
---------------------------< Precondition >---------------------------
function try_prepare_quest(task_id, task_data, tg_id)
	trace_dbg("validate "..task_id, task_data)
	trace_assert(task_data, "WTF: validate_task: no task data")

	if igi_mcm.get_task_value(task_data.quest_id, "disabled") then return end
	if not igi_mcm.get_options_value("debug") then
		if not igi_actions.check_conditions(task_data.preconditions or {}) then
			return
		end
	end

	trace_dbg("setup "..task_id, task_data)
	local CACHE = igi_taskdata.finalize_task_cache(task_data, task_id, tg_id)
	TASK_SETUP[task_id] = igi_generate.run_ML(CACHE, "")
	trace_dbg("CACHE after setup "..task_id, TASK_SETUP[task_id])
	return TASK_SETUP[task_id]
end

--< Effect >--------------------------------------------------
function setup_quest(task_id)
	--This function will be called on_job_descr
	local CACHE = get_setup_cache(task_id)
	--Print the message
	CreateTimeEvent(0, "igi_task_"..CACHE.task_id.."_setup", 0,
		igi_description.get_task_text_function(CACHE))
end
--< Init >----------------------------------------------------
function initialise_CACHE(task_id)
	TASKS_CACHE[task_id] = TASK_SETUP[task_id]
	TASK_SETUP[task_id] = nil

	local CACHE = get_cache(task_id)

	igi_subtask.initialise_subtasks(CACHE)
	igi_text_processor.resolve_and_link_cache(CACHE, "!")

	igi_callbacks.invoke_callbacks("on_first_run", CACHE)
end

--< Status >--------------------------------------------------
function quest_status(task_id)
	local CACHE = get_cache(task_id)
	---------------------------<ACTIONS>---------------------
	igi_actions.update_actions(CACHE)
	igi_subtask.process_subtasks(CACHE)
	igi_callbacks.invoke_callbacks("on_task_update", CACHE)

	---------------------------<STAGE>----------------------
	if CACHE.status == TASK_STATUSES.FAILED then return "fail" end
	if CACHE.status == TASK_STATUSES.COMPLETED and not igi_rewards.has_material_rewards(CACHE) then
		return "complete"
	end

	igi_subtask.update_current_map_target(CACHE)
end
--< Target >--------------------------------------------------
function quest_target(task_id)
	--This function point to a task target in PDA
	local CACHE = get_cache(task_id)

	-- trace target in debug mode
	--[[ local target_id = CACHE.current_target_id
	if target_id and igi_mcm.get_options_value("debug") then
		local se_obj = WorldState.objects[target_id]
		if se_obj then
			local sec = se_obj and se_obj:section_name() or "nil"
			trace_dbg("target "..tostring(target_id).." is "..sec)
		end
	end ]]

	return CACHE.current_target_id
end
--< Text >--------------------------------------------------
function quest_text(task_id,field)
	--This function return a text for title_functor and descr_functor
	local CACHE = get_cache(task_id)

	if field == "descr" and CACHE.status ~= "RUNNING" then
		field = "done"
	end

	local text = igi_description.get_task_text(CACHE.description_key, field, CACHE.task_giver_id)
	local desc = field ~= "title" and ("\\n "..igi_description.get_description(CACHE)) or ""
	local mark = igi_mcm.get_options_value("wtf_task_mark") and "[WTF] " or ""
	return mark..text..desc
end
--< Reward >--------------------------------------------------
function finish_quest(task_id)
	local CACHE = get_cache(task_id)

	igi_callbacks.invoke_callbacks("on_complete", CACHE)
	igi_subtask.finish_all_subtasks(CACHE)
	igi_rewards.collect_and_give_rewards(CACHE)

	TASKS_CACHE[task_id] = nil
end

function first_finished_igi_task(tg_id)
	for task_id, cache in pairs(TASKS_CACHE) do
		if cache.task_giver_id == tg_id
			and (cache.status == TASK_STATUSES.READY_TO_FINISH
				or cache.status == TASK_STATUSES.COMPLETED) then
			return task_id
		end
	end
end
