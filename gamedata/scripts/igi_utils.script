-- There are purely utility functions, not bound with tasks or STALKER

local trace_assert = igi_helper.trace_assert

Set = {
	__cls = 'Set',

	new = function()
		return setmetatable({}, {__index = Set})
	end,

	union = function(self, set2)
		local new_set = dup_table(self)
		for k in pairs(set2) do
			new_set[k] = true
		end
		return new_set
	end,

	intersection = function(self, set2)
		local new_set = {}
		for k in pairs(set2) do
			new_set[k] = self[k]
		end
		return new_set
	end,

	difference = function(self, set2)
		local new_set = dup_table(self)
		for k in pairs(set2) do
			new_set[k] = nil
		end
		return new_set
	end,

	from_list = function(list)
		local new_set = {}
		for _, v in pairs(list) do
			new_set[v] = true
		end
		return new_set
	end,

	to_list = function(self)
		local tbl = {}
		for k in pairs(self) do
			tbl[#tbl + 1] = k
		end
		tbl.__cls = nil
		return tbl
	end,

	insert = function (self, k)
		self[k] = true
	end,

	is_subset = function (set1, set2)
		for k in pairs(set1) do
			if not set2[k] then
				return false
			end
		end
		return true
	end,
}

Heap = {
	__cls = 'Heap',

	new = function ()
		local t = {
			priorities = {},
			payloads = {},
		}
		return setmetatable(t, {__index = Heap})
	end,

	swap = function(self, index1, index2)
		self.priorities[index1], self.priorities[index2] =
			self.priorities[index2], self.priorities[index1]

		self.payloads[index1], self.payloads[index2] =
			self.payloads[index2], self.payloads[index1]
	end,

	compare = function(self, index1, index2)
		igi_helper.trace_assert(self.priorities[index1] and self.priorities[index2], "No priorities?", self)
		return self.priorities[index1] > self.priorities[index2]
	end,

	sift_up = function(self, index)
		if index == 1 then return end

		local parent_index = math.floor(index/2)
		if self:compare(parent_index, index) then
			self:swap(index, parent_index)
			self:sift_up(parent_index)
		end
	end,

	sift_down = function(self, index)
		local minIndex, leftChildIndex, rightChildIndex
		leftChildIndex, rightChildIndex = index * 2, index * 2 + 1
		local priorities = self.priorities

		if rightChildIndex > #priorities then
			if leftChildIndex > #priorities then
				return
			else
				minIndex = leftChildIndex
			end
		else
			if self:compare(leftChildIndex, rightChildIndex) then
				minIndex = rightChildIndex
			else
				minIndex = leftChildIndex
			end
		end

		if self:compare(index, minIndex) then
			self:swap(index, minIndex)
			self:sift_down(minIndex)
		end
	end,

	push = function(self, payload, priority)
		igi_helper.trace_assert(priority and payload, "No priority or payload")
		self.priorities[#self.priorities+1] = priority
		self.payloads[#self.payloads+1] = payload
		self:sift_up(#self.priorities)
	end,

	pop = function(self)
		if #self.payloads == 0 then return end
		local to_return = self.payloads[1]

		self.priorities[1] = self.priorities[#self.priorities]
		self.payloads[1] = self.payloads[#self.payloads]

		self.priorities[#self.priorities] = nil
		self.payloads[#self.payloads] = nil
		if #self.priorities > 0 then
			self:sift_down(1)
		end

		return to_return
	end,

	peek = function(self)
		return self.payloads[1]
	end,

	change_priority = function(self, payload, priority)
		for i, payload2 in ipairs(self.payloads) do
			if payload2 == payload then
				local old_priority = self.priorities[i]
				self.priorities[i] = priority

				if priority < old_priority then
					self:sift_up(i)
				else
					self:sift_down(i)
				end
			end
		end
	end,

	remove_by_index = function(self, index)
		self.priorities[index] = self.priorities[#self.priorities]
		self.payloads[index] = self.payloads[#self.payloads]

		self.payloads[#self.payloads] = nil
		self.priorities[#self.priorities] = nil
		self:sift_down(index)
	end,

	remove_element = function(self, payload)
		for i=#self.payloads, 1, -1 do
			if self.payloads[i] == payload then
				self:remove_by_index(i)
			end
		end
	end,

	size = function (self)
		return #self.payloads
	end,

	get = function(self, index)
		return self.payloads[index]
	end
}

function random_table_element(tbl)
	-- It's preffered to use lists with igi_random.rand rather
	-- than this function bcs this function is slow
	local keyset = {}
	for k in pairs(tbl) do
		table.insert(keyset, k)
	end
	-- now you can reliably return a random key
	local random_key = keyset[igi_random.rand(#keyset)]
	local random_elem = tbl[random_key]
	return random_elem, random_key
end

function get_random_items(orig_list, amount)
	if not orig_list or #orig_list < amount then
		return nil, "Not enough items"
	end

	local set = {}
	local list = {}
	for i=1, amount do
		local item
		repeat
			item = orig_list[igi_random.rand(#orig_list)]
		until not set[item]
		list[#list + 1] = item
		set[item] = true
	end
	return list
end

function extend_list(orig, val)
	-- add value to a list or add every value if val is a list
	if type(val) == 'table' then
		for _, v in pairs(val) do orig[#orig + 1] = v end
	else orig[#orig + 1] = val end
	return orig
end

function add_to_list_recursive(tbl, val, ...)
	if not tbl then return end

	local args = {...}
	for k, v in pairs(args) do
		if not tbl[v] then
			tbl[v] = {}
		end
		tbl = tbl[v]
		if k == #args then
			table.insert(tbl, val)
		end
	end
end

function memoize_one_variable(f, id)
    local cache = MemoizeCache.new(id)
    return function (arg)
		local key = arg ~= nil and arg or "!nil!"
        if cache[key] then
            return cache[key]
        else
            local y = f(arg)
            cache[key] = y
            return y
        end
    end
end

function one_timer_one_variable(f, id)
	local cache = MemoizeCache.new(id)
	return function (arg)
		local key = arg ~= nil and arg or "!nil!"
		if not cache[key] then
			cache[key] = true
			return f(arg)
		end
	end
end

function escape_pattern(text)
    return text:gsub("([^%w])", "%%%1")
end

function partial(f, ...)
	args = {...}
	print(unpack(args))
	local new_f = function(...)
	    local new_args = {unpack(args)}
	    for k,v in pairs({...}) do	-- lua, blyat...
	        new_args[#new_args+1] = v
	    end
		return f(unpack(new_args))
	end
	return new_f
end

MemoizeCache = {
	unnamed = {}
}

function MemoizeCache.new(id)
	id = id or "unnamed"
	if not MemoizeCache[id] then MemoizeCache[id] = {} end
	local cache_by_id = MemoizeCache[id]

	local tbl = {}
	cache_by_id[#cache_by_id+1] = tbl
	return tbl
end

function MemoizeCache._reset_id(id)
	if type(MemoizeCache[id]) ~= 'table' then return end
	for _, tbl in pairs(MemoizeCache[id]) do
		for k2 in pairs(tbl) do
			tbl[k2] = nil
		end
	end
end

function MemoizeCache.reset(id)
	if id then
		MemoizeCache._reset_id(id)
		return
	end
	for k in pairs(MemoizeCache) do
		MemoizeCache._reset_id(k)
	end
end

function iterate_table(tbl, func)
	for k,v in pairs(tbl) do
		if type(v) == "table" then
			iterate_table(v, func)
		end
		func(k, v, tbl)
	end
end

function defaultdict(factory)
	local tbl = {}
	local metatbl = {}
	if type(factory) == "function" then
		metatbl.__index = function (self, k)
			local v = factory()
			self[k] = v
			return v
		end
	else
		metatbl.__index = function (self, k)
			local v = factory
			self[k] = v
			return v
		end
	end
	setmetatable(tbl, metatbl)
	return tbl
end

function shallow_copy(dest, src)
	for k, v in pairs(src) do
		dest[k] = v
	end
end

function convert_type(str)
	if tonumber(str) then
		return tonumber(str)
	elseif str == "true" then
		return true
	elseif str == "false" then
		return false
	else
		return str
	end
end

function lookup_path(path, origin)
	local curr = origin
	for k in string.gmatch(path, "[^%.]+") do
		curr = curr[k]
	end
	return curr
end
