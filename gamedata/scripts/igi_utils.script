Set = {
	union = function(self, set2)
		local new_set = dup_table(self)
		for k in pairs(set2) do
			new_set[k] = true
		end
		return new_set
	end,

	intersection = function(self, set2)
		local new_set = {}
		for k in pairs(set2) do
			new_set[k] = self[k]
		end
		return new_set
	end,

	difference = function(self, set2)
		local new_set = dup_table(self)
		for k in pairs(set2) do
			new_set[k] = nil
		end
		return new_set
	end,

	from_list = function(list)
		local new_set = {}
		for _, v in pairs(list) do
			new_set[v] = true
		end
		return new_set
	end,

	is_subset = function (set1, set2)
		for k in pairs(set1) do
			if not set2[k] then
				return false
			end
		end
		return true
	end,
}

function random_table_element(tbl)
	local keyset = {}
	for k in pairs(tbl) do
		table.insert(keyset, k)
	end
	-- now you can reliably return a random key
	local random_key = keyset[igi_random.rand(#keyset)]
	local random_elem = tbl[random_key]
	return random_elem, random_key
end

function choose(...)
	local list = { ... }
	return list[igi_random.rand(#list)]
end

function get_random_items(orig_list, amount)
	if not orig_list or #orig_list < amount then
		return nil, "Not enough items"
	end

	local set = {}
	local list = {}
	for i=1, amount do
		local item
		repeat
			item = orig_list[igi_random.rand(#orig_list)]
		until not set[item]
		list[#list + 1] = item
		set[item] = true
	end
	return list
end

function defaultdict(factory)
	local tbl = {}
	local metatbl = {}
	if type(factory) == "function" then
		metatbl.__index = function (self, k)
			local v = factory()
			self[k] = v
			return v
		end
	else
		metatbl.__index = function (self, k)
			local v = factory
			self[k] = v
			return v
		end
	end
	setmetatable(tbl, metatbl)
	return tbl
end
