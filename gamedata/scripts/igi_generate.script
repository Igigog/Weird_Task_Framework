local trace_assert = igi_helper.trace_assert

function generate(entity, link_context)
    if not entity.GEN then return {entity} end

    local gen_str = entity.GEN
    local link_id = entity.link_id
    entity.link_id = nil
    entity.GEN = nil

    local new_entities = igi_text_processor.eval_logic_macro(gen_str, link_context)(entity)

    new_entities[1].link_id = link_id
    new_entities[1]._GEN = gen_str

    return new_entities
end

function Amount(n)
    return function (entity)
        local new_entities = {}
        for _=1, n do
            new_entities[#new_entities+1] = dup_table(entity)
        end
        return new_entities
    end
end

function Split(field_in, field_out, count)
    return function (entity)
        local before = entity[field_in]
        trace_assert(type(before) == "table", "Split field is not a table", entity)
        trace_assert(field_out ~= nil, "Split out field is nil", entity)
        
        count = (count or #before)
        if #before < count then
            count = #before
        end

        if count < 1 then
            return {entity}
        end

        entity[field_in] = nil

        local new_entities = {}
        for _, val in ipairs(igi_utils.get_random_items(before, count)) do
            local t = dup_table(entity)
            t[field_out] = val
            new_entities[#new_entities+1] = t
        end

        new_entities[1][field_in] = before
        return new_entities
    end
end

