local trace_assert = igi_helper.trace_assert

function run_ML(CACHE)
	igi_text_processor.resolve_and_link_cache(CACHE)

	local new_entities = {}
	for _, entity in pairs(CACHE.entities) do
		local gen_entities = generate(entity)
		for _, new_entity in pairs(gen_entities) do
			new_entities[#new_entities+1] = new_entity
		end
	end
	CACHE.entities = new_entities

	igi_text_processor.resolve_and_link_cache(CACHE)
	return CACHE
end


function generate(entity)
    if not entity.GEN then return {entity} end

    local gen_str = entity.GEN
    local link_id = entity.link_id
    entity.link_id = nil
    entity.GEN = nil

    local new_entities = igi_helper.eval(gen_str)(entity)

    new_entities[1].link_id = link_id
    new_entities[1]._GEN = gen_str

    return new_entities
end

function Amount(n)
    return function (entity)
        local new_entities = {}
        for _=1, n do
            local t = dup_table(entity)
            new_entities[#new_entities+1] = t
        end
        return new_entities
    end
end

function Split(field_in, field_out, count)
    return function (entity)
        local before = entity[field_in]
        trace_assert(before ~= nil, "Split field is nil", entity)
        trace_assert(field_out ~= nil, "Split out field is nil", entity)

        entity[field_in] = nil
        if type(before) ~= "string" then -- probably single value converted to other type
            entity[field_out] = before
            return {entity}
        end

        local new_entities = {}
        for val in before:gmatch("[^,%s]+") do
            local t = dup_table(entity)
            t[field_out] = igi_utils.convert_type(val)
            new_entities[#new_entities+1] = t

            if count and #new_entities >= count then
                break
            end
        end
        return new_entities
    end
end

